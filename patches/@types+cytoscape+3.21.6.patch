diff --git a/node_modules/@types/cytoscape/README.md b/node_modules/@types/cytoscape/README.md
index 5d4c1dd..67a46d3 100644
--- a/node_modules/@types/cytoscape/README.md
+++ b/node_modules/@types/cytoscape/README.md
@@ -2,15 +2,14 @@
 > `npm install --save @types/cytoscape`
 
 # Summary
-This package contains type definitions for Cytoscape.js (http://js.cytoscape.org/).
+This package contains type definitions for cytoscape (http://js.cytoscape.org/).
 
 # Details
 Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/cytoscape.
 
 ### Additional Details
- * Last updated: Thu, 29 Sep 2022 03:03:29 GMT
+ * Last updated: Tue, 13 Aug 2024 23:35:54 GMT
  * Dependencies: none
- * Global values: `cytoscape`
 
 # Credits
-These definitions were written by [ Fabian Schmidt and Fred Eisele](https://github.com/phreed), [Shenghan Gao](https://github.com/wy193777), [Yuri Pereira Constante](https://github.com/ypconstante), [Jan-Niclas Struewer](https://github.com/janniclas), [Andrej Kirejeŭ](https://github.com/gsbelarus), [Peter Ferrarotto](https://github.com/peterjferrarotto), [Xavier Ho](https://github.com/spaxe), [Fredrik Sandström](https://github.com/Veckodag), [Johan Svensson](https://github.com/jsve), and [Roger Dubbs](https://github.com/rogerdubbs).
+These definitions were written by [ Fabian Schmidt and Fred Eisele](https://github.com/phreed), [Shenghan Gao](https://github.com/wy193777), [Yuri Pereira Constante](https://github.com/ypconstante), [Jan-Niclas Struewer](https://github.com/janniclas), [Andrej Kirejeŭ](https://github.com/gsbelarus), [Peter Ferrarotto](https://github.com/peterjferrarotto), [Xavier Ho](https://github.com/spaxe), [Fredrik Sandström](https://github.com/Veckodag), and [Johan Svensson](https://github.com/jsve).
diff --git a/node_modules/@types/cytoscape/index.d.ts b/node_modules/@types/cytoscape/index.d.ts
index 647a82b..97e0fc1 100644
--- a/node_modules/@types/cytoscape/index.d.ts
+++ b/node_modules/@types/cytoscape/index.d.ts
@@ -1,16 +1,3 @@
-// Type definitions for Cytoscape.js 3.19
-// Project: http://js.cytoscape.org/
-// Definitions by:  Fabian Schmidt and Fred Eisele <https://github.com/phreed>
-//                  Shenghan Gao <https://github.com/wy193777>
-//                  Yuri Pereira Constante <https://github.com/ypconstante>
-//                  Jan-Niclas Struewer <https://github.com/janniclas>
-//                  Andrej Kirejeŭ <https://github.com/gsbelarus>
-//                  Peter Ferrarotto <https://github.com/peterjferrarotto>
-//                  Xavier Ho <https://github.com/spaxe>
-//                  Fredrik Sandström <https://github.com/Veckodag>
-//                  Johan Svensson <https://github.com/jsve>
-//                  Roger Dubbs <https://github.com/rogerdubbs>
-// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
 //
 // Translation from Objects in help to Typescript interface.
 // http://js.cytoscape.org/#notation/functions
@@ -26,10 +13,10 @@
  * ele  --> Cy.Singular
  *  a collection of a single element (node or edge)
  *
- * node --> Cy.NodeSingular
+ * node --> Cy.NodeSingular<CustomDataNode>
  *  a collection of a single node
  *
- * nodes -> Cy.NodeCollection
+ * nodes -> Cy.NodeCollection<CustomDataNode>
  *  a collection of one or more nodes
  *
  * edge --> Cy.EdgeSingular
@@ -44,13 +31,13 @@
  * For a input parameter it will always expect:
  *  - Cy.Collection
  *      The input can be any element (node and edge) collection.
- *  - Cy.NodeCollection
+ *  - Cy.NodeCollection<CustomDataNode>
  *      The input must be a node collection.
  *  - Cy.EdgeCollection
  *      The input must be a edge collection.
  *  - Cy.Singular
  *      The input must be a single element.
- *  - Cy.NodeSingular
+ *  - Cy.NodeSingular<CustomDataNode>
  *      The inut must be a single node.
  *  - Cy.EdgeSingular
  *      The input must be a single edge.
@@ -60,16 +47,15 @@
  *      The output is a collection of node and edge elements OR single element.
  *  - Cy.EdgeCollection
  *      The output is a collection of edge elements OR single edge.
- *  - Cy.NodeCollection
+ *  - Cy.NodeCollection<CustomDataNode>
  *      The output is a collection of node elements OR single node.
  *
  * A number of interfaces contain nothing as they server to collect interfaces.
- *
  */
 export = cytoscape;
 export as namespace cytoscape;
 
-declare function cytoscape(options?: cytoscape.CytoscapeOptions): cytoscape.Core;
+declare function cytoscape<CustomDataNode = any>(options?: cytoscape.CytoscapeOptions<CustomDataNode>): cytoscape.Core;
 declare function cytoscape(type: string, name: string): unknown;
 declare function cytoscape(type: string, name: string, registrant: any): void;
 
@@ -81,9 +67,9 @@ declare namespace cytoscape {
 
     type CssStyleDeclaration = any;
 
-    interface ElementDefinition {
+    interface ElementDefinition<CustomDataNode = any> {
         group?: ElementGroup | undefined;
-        data: NodeDataDefinition | EdgeDataDefinition;
+        data: NodeDataDefinition<CustomDataNode> | EdgeDataDefinition;
         /**
          * Scratchpad data (usually temp or nonserialisable data)
          */
@@ -112,10 +98,14 @@ declare namespace cytoscape {
          * Wether the node can be grabbed and moved by the user
          */
         grabbable?: boolean | undefined;
+        /**
+         * Whether the element has passthrough panning enabled.
+         */
+        pannable?: boolean | undefined;
         /**
          * a space separated list of class names that the element has
          */
-        classes?: string | undefined;
+        classes?: string[] | string | undefined;
         /**
          *  CssStyleDeclaration;
          */
@@ -123,7 +113,7 @@ declare namespace cytoscape {
         /**
          * you should only use `style`/`css` for very special cases; use classes instead
          */
-        css?: Css.Node | Css.Edge | undefined;
+        css?: Css.Node<CustomDataNode> | Css.Edge<CustomDataNode> | undefined;
     }
 
     interface ElementDataDefinition {
@@ -153,17 +143,17 @@ declare namespace cytoscape {
         [key: string]: any;
     }
 
-    interface NodeDefinition extends ElementDefinition {
-        data: NodeDataDefinition;
+    interface NodeDefinition<CustomDataNode = any> extends ElementDefinition<CustomDataNode> {
+        data: NodeDataDefinition<CustomDataNode>;
     }
 
-    interface NodeDataDefinition extends ElementDataDefinition {
+    type NodeDataDefinition<CustomDataNode = any> = ElementDataDefinition & CustomDataNode & {
         id?: string | undefined;
         parent?: string | undefined;
         [key: string]: any;
     }
 
-    interface CytoscapeOptions {
+    interface CytoscapeOptions<CustomDataNode = any> {
         ///////////////////////////////////////
         // very commonly used options:
         /**
@@ -178,15 +168,15 @@ declare namespace cytoscape {
          * An array of [[Elements]] specified as plain objects. For convenience, this option can alternatively be specified as a promise that resolves to the elements JSON.
          */
         elements?:
-            | ElementsDefinition
-            | ElementDefinition[]
-            | Promise<ElementsDefinition>
-            | Promise<ElementDefinition[]>
+            | ElementsDefinition<CustomDataNode>
+            | ElementDefinition<CustomDataNode>[]
+            | Promise<ElementsDefinition<CustomDataNode>>
+            | Promise<ElementDefinition<CustomDataNode>[]>
             | undefined;
         /**
          * The [[Stylesheet]] used to style the graph. For convenience, this option can alternatively be specified as a promise that resolves to the stylesheet.
          */
-        style?: Stylesheet[] | Promise<Stylesheet[]> | undefined;
+        style?: Stylesheet<CustomDataNode>[] | Promise<Stylesheet<CustomDataNode>[]> | undefined;
         /**
          * A plain object that specifies layout options.
          * Which layout is initially run is specified by the name field.
@@ -196,7 +186,7 @@ declare namespace cytoscape {
          * leaving your nodes in their current positions
          * (e.g. specified in options.elements at initialisation time)
          */
-        layout?: LayoutOptions | undefined;
+        layout?: LayoutOptions<CustomDataNode> | undefined;
 
         /**
          * A plain object that contains graph-level data (i.e. data that does not belong to any particular node or edge).
@@ -383,7 +373,7 @@ declare namespace cytoscape {
          *
          * The default value is 1.
          */
-        pixelRatio?: number | 'auto' | undefined;
+        pixelRatio?: number | "auto" | undefined;
     }
 
     /**
@@ -394,28 +384,30 @@ declare namespace cytoscape {
      * All of the library’s features are accessed through this object.
      * http://js.cytoscape.org/#core
      */
-    interface Core
-        extends CoreGraphManipulation,
-            CoreData,
+    interface Core<CustomDataNode = any>
+        extends
+            CoreGraphManipulation<CustomDataNode>,
+            CoreData<CustomDataNode>,
             CoreGraphManipulationExt,
             CoreEvents,
             CoreViewportManipulation,
             CoreAnimation,
-            CoreLayout,
-            CoreStyle,
-            CoreExport {}
+            CoreLayout<CustomDataNode>,
+            CoreStyle<CustomDataNode>,
+            CoreExport
+    {}
 
     /**
      * These are the principle functions used to interact with the graph model.
      *
      * http://js.cytoscape.org/#core/graph-manipulation
      */
-    interface CoreGraphManipulation {
+    interface CoreGraphManipulation<CustomDataNode> {
         /**
          * Add elements to the graph and return them.
          */
         add(
-            eles: ElementDefinition | ElementDefinition[] | ElementsDefinition | CollectionArgument,
+            eles: ElementDefinition<CustomDataNode> | ElementDefinition<CustomDataNode>[] | ElementsDefinition<CustomDataNode> | CollectionArgument,
         ): CollectionReturnValue;
 
         /**
@@ -461,7 +453,7 @@ declare namespace cytoscape {
         /**
          * Get nodes in the graph matching the specified selector.
          */
-        nodes(selector?: Selector): NodeCollection;
+        nodes(selector?: Selector): NodeCollection<CustomDataNode>;
 
         /**
          * Get edges in the graph matching the specified selector.
@@ -532,7 +524,7 @@ declare namespace cytoscape {
     /**
      * https://js.cytoscape.org/#core/data
      */
-    interface CoreData {
+    interface CoreData<CustomDataNode = any> {
         /**
          * Read and write developer-defined data associated with the graph.
          * http://js.cytoscape.org/#cy.data
@@ -543,7 +535,8 @@ declare namespace cytoscape {
          *
          * @param name The name of the field to get.
          */
-        data(name?: string): any;
+        data(name: keyof CustomDataNode): CustomDataNode[typeof name];
+        data(): CustomDataNode;
         /**
          * Set a particular data field.
          * @alias attr
@@ -765,7 +758,7 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#core/viewport-manipulation
      */
-    interface CoreViewportManipulation {
+    interface CoreViewportManipulation<CustomDataNode = any> {
         /**
          * Get the HTML DOM element in which the graph is visualised.
          * A null value is returned if the Core is headless.
@@ -1054,7 +1047,6 @@ declare namespace cytoscape {
 
     /**
      * http://js.cytoscape.org/#core/animation
-     *
      */
     interface AnimationFitOptions {
         eles: CollectionArgument | Selector; // to which the viewport will be fitted.
@@ -1145,7 +1137,7 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#core/layout
      */
-    interface CoreLayout {
+    interface CoreLayout<CustomDataNode> {
         /**
          * Run a layout, which algorithmically positions the nodes in the graph.
          * For layouts included with Cytoscape.js, you can find their
@@ -1155,7 +1147,7 @@ declare namespace cytoscape {
          * An analogue to run a layout on a subset of the graph exists as eles.layout().
          * http://js.cytoscape.org/#cy.layout
          */
-        layout(layout: LayoutOptions): Layouts;
+        layout(layout: LayoutOptions<CustomDataNode>): Layouts;
         /**
          * Get a new layout, which can be used to algorithmically
          * position the nodes in the graph.
@@ -1168,48 +1160,109 @@ declare namespace cytoscape {
          * Note that you must call layout.run() in order for it to affect the graph.
          * An analogue to make a layout on a subset of the graph exists as eles.makeLayout().
          */
-        makeLayout(options: LayoutOptions): Layouts;
-        createLayout(options: LayoutOptions): Layouts;
+        makeLayout(options: LayoutOptions<CustomDataNode>): Layouts;
+        createLayout(options: LayoutOptions<CustomDataNode>): Layouts;
     }
 
     /**
      * Get the entry point to modify the visual style of the graph after initialisation.
      * http://js.cytoscape.org/#core/style
      */
-    interface ElementStylesheetStyle extends StylesheetStyle {
+    interface ElementStylesheetStyle<CustomDataNode> extends StylesheetStyle<CustomDataNode> {
         json(): any;
     }
-    interface ElementStylesheetCSS extends StylesheetCSS {
+    interface ElementStylesheetCSS<CustomDataNode> extends StylesheetCSS<CustomDataNode> {
         json(): any;
     }
 
-    interface CoreStyle {
+    interface CoreStyle<CustomDataNode> {
+        /**
+         * Assign a new stylesheet to replace the existing one (if provided)
+         * and return the style.
+         */
+        style(sheet?: Stylesheet<CustomDataNode> | Stylesheet<CustomDataNode>[] | string): Style<CustomDataNode>;
+    }
+
+    interface Style<CustomDataNode> {
+        /**
+         * Add a rule to the stylesheet.
+         */
+        append(style: string | Stylesheet<CustomDataNode> | Stylesheet<CustomDataNode>[]): this;
+
+        /**
+         * Remove all styles, including default styles.
+         */
+        clear(): this;
+
+        /**
+         * Set the style from JSON data.
+         * @example
+         * style.fromJson([
+         *   {
+         *     selector: 'node',
+         *     style: {
+         *       'background-color': 'red'
+         *     }
+         *   }
+         * ]);
+         */
+        fromJson(json: any): this;
+
         /**
-         * Get the current style object.
+         * Set the style from a string.
+         * @example
+         * style.fromString('node { background-color: blue; }');
          */
-        style(): ElementStylesheetStyle | ElementStylesheetCSS;
+        fromString(style: string): this;
+
         /**
-         * Assign a new stylesheet to replace the existing one.
+         * Resets to the default stylesheet.
          */
-        style(sheet: Stylesheet | Stylesheet[] | string): Stylesheet;
+        resetToDefault(): this;
+
+        /**
+         * Sets the selector context for defining styles.
+         * @example
+         * style.selector('foo').style('color', 'black');
+         */
+        selector(s: string): this;
+
+        /**
+         * Sets a style for the current selected selector.
+         * @example
+         * style.selector('foo').style('color', 'black');
+         */
+        style(key: string, value: string): this;
+
+        /**
+         * Sets a style for the current selected selector.
+         * @example
+         * style.selector('foo').style({color: 'black'});
+         */
+        style(css: Css.Node<CustomDataNode> | Css.Edge<CustomDataNode>): this;
+
+        /**
+         * Makes the changes active.
+         */
+        update(): void;
     }
 
     /**
      * http://js.cytoscape.org/#cy.style
      */
-    type Stylesheet = StylesheetStyle | StylesheetCSS;
+    type Stylesheet<CustomDataNode> = StylesheetStyle<CustomDataNode> | StylesheetCSS<CustomDataNode>;
 
-    interface StylesheetStyle {
+    interface StylesheetStyle<CustomDataNode> {
         selector: string;
-        style: Css.Node | Css.Edge | Css.Core;
+        style: Css.Node<CustomDataNode> | Css.Edge<CustomDataNode> | Css.Core;
     }
 
     /**
      * http://js.cytoscape.org/#cy.style
      */
-    interface StylesheetCSS {
+    interface StylesheetCSS<CustomDataNode> {
         selector: string;
-        css: Css.Node | Css.Edge | Css.Core;
+        css: Css.Node<CustomDataNode> | Css.Edge<CustomDataNode> | Css.Core;
     }
 
     /**
@@ -1241,20 +1294,20 @@ declare namespace cytoscape {
         /**
          * output Whether the output should be 'base64uri' (default), 'base64', or 'blob'.
          */
-        output?: 'base64uri' | 'base64' | undefined;
+        output?: "base64uri" | "base64" | undefined;
     }
     interface ExportBlobOptions extends ExportOptions {
         /**
          * output Whether the output should be 'base64uri' (default), 'base64', or 'blob'.
          */
-        output?: 'blob' | undefined;
+        output?: "blob" | undefined;
     }
 
     interface ExportBlobPromiseOptions extends ExportOptions {
         /**
          * output Whether the output should be 'base64uri' (default), 'base64', 'blob', or 'blob-promise'.
          */
-        output?: 'blob-promise' | undefined;
+        output?: "blob-promise" | undefined;
     }
 
     interface ExportJpgOptions extends ExportOptions {
@@ -1308,20 +1361,22 @@ declare namespace cytoscape {
      * The input can be any element (node and edge) collection.
      * http://js.cytoscape.org/#collection
      */
-    interface Collection<TOut = SingularElementReturnValue, TIn = SingularElementArgument>
-        extends CollectionGraphManipulation,
+    interface Collection<TOut = SingularElementReturnValue, TIn = SingularElementArgument, CustomDataNode = any>
+        extends
+            CollectionGraphManipulation<CustomDataNode>,
             CollectionEvents,
-            CollectionData,
+            CollectionData<CustomDataNode>,
             CollectionPosition,
             CollectionTraversing,
-            CollectionLayout,
+            CollectionLayout<CustomDataNode>,
             CollectionSelection,
             CollectionStyle,
             CollectionAnimation,
             CollectionComparision,
             CollectionIteration<TIn, TOut>,
-            CollectionBuildingFiltering<TIn, TOut>,
-            CollectionAlgorithms {}
+            CollectionBuildingFiltering<TIn, TOut, CustomDataNode>,
+            CollectionAlgorithms<CustomDataNode>
+    {}
 
     /**
      * ele  --> Cy.Singular
@@ -1329,26 +1384,28 @@ declare namespace cytoscape {
      * NB: every singular collection is a general collection too (but not vice versa)!
      */
     interface Singular<TOut = SingularElementReturnValue, TIn = SingularElementArgument>
-        extends Collection<TOut, TIn>,
+        extends
+            Collection<TOut, TIn>,
             SingularGraphManipulation,
             SingularData,
             SingularPosition,
             SingularSelection,
             SingularStyle,
-            SingularAnimation {}
+            SingularAnimation
+    {}
 
-    interface ElementsDefinition {
-        nodes: NodeDefinition[];
+    interface ElementsDefinition<CustomDataNode> {
+        nodes: NodeDefinition<CustomDataNode>[];
         edges: EdgeDefinition[];
     }
 
-    type EventHandler = (event: EventObject, extraParams?: any) => void;
+    type EventHandler = (event: EventObject, ...extraParams: any) => void;
 
     /**
      * The output is a collection of node and edge elements OR single element.
      */
-    type CollectionArgument = Collection | EdgeCollection | NodeCollection | SingularElementArgument;
-    type CollectionReturnValue = Collection & EdgeCollection & NodeCollection & SingularElementReturnValue;
+    type CollectionArgument<CustomDataNode = any> = Collection | EdgeCollection | NodeCollection<CustomDataNode> | SingularElementArgument;
+    type CollectionReturnValue<CustomDataNode = any> = Collection & EdgeCollection & NodeCollection<CustomDataNode> & SingularElementReturnValue;
 
     /**
      * edges -> Cy.EdgeCollection
@@ -1358,48 +1415,54 @@ declare namespace cytoscape {
      */
     interface EdgeCollection extends Collection<EdgeSingular, EdgeSingular>, EdgeCollectionTraversing {}
     /**
-     *  nodes -> Cy.NodeCollection
+     *  nodes -> Cy.NodeCollection<CustomDataNode>
      *  a collection of one or more nodes
      *
      * The output is a collection of node elements OR single node.
      */
-    interface NodeCollection
-        extends Collection<NodeSingular, NodeSingular>,
+    interface NodeCollection<CustomDataNode>
+        extends
+            Collection<NodeSingular<CustomDataNode>, NodeSingular<CustomDataNode>>,
             NodeCollectionMetadata,
             NodeCollectionPosition,
-            NodeCollectionTraversing,
-            NodeCollectionCompound,
-            NodeCollectionLayout {}
+            NodeCollectionTraversing<CustomDataNode>,
+            NodeCollectionCompound<CustomDataNode>,
+            NodeCollectionLayout
+    {}
 
-    type SingularElementArgument = EdgeSingular | NodeSingular;
-    type SingularElementReturnValue = EdgeSingular & NodeSingular;
+    type SingularElementArgument<CustomDataNode = any> = EdgeSingular | NodeSingular<CustomDataNode>;
+    type SingularElementReturnValue<CustomDataNode = any> = EdgeSingular & NodeSingular<CustomDataNode>;
     /**
      *  edge --> Cy.EdgeSingular
      *  a collection of a single edge
      */
     interface EdgeSingular
-        extends Singular<EdgeSingular, EdgeSingular>,
+        extends
+            Singular<EdgeSingular, EdgeSingular>,
             EdgeCollection,
             EdgeSingularData,
             EdgeSingularPoints,
-            EdgeSingularTraversing {}
+            EdgeSingularTraversing
+    {}
 
     /**
-     *  node --> Cy.NodeSingular
+     *  node --> Cy.NodeSingular<CustomDataNode>
      *  a collection of a single node
      */
-    interface NodeSingular
-        extends Singular<NodeSingular, NodeSingular>,
-            NodeCollection,
+    interface NodeSingular<CustomDataNode>
+        extends
+            Singular<NodeSingular<CustomDataNode>, NodeSingular<CustomDataNode>>,
+            NodeCollection<CustomDataNode>,
             NodeSingularMetadata,
             NodeSingularPosition,
             NodeSingularCompound,
-            NodeSingularLayout {}
+            NodeSingularLayout
+    {}
 
     /**
      * http://js.cytoscape.org/#collection/graph-manipulation
      */
-    interface CollectionGraphManipulation {
+    interface CollectionGraphManipulation<CustomDataNode> {
         /**
          * Remove the elements from the graph.
          * http://js.cytoscape.org/#eles.remove
@@ -1432,7 +1495,7 @@ declare namespace cytoscape {
          * Effectively move nodes to different parent node. The modified (actually new) elements are returned.
          * http://js.cytoscape.org/#eles.move
          */
-        move(location: { parent: string | null }): NodeCollection;
+        move(location: { parent: string | null }): NodeCollection<CustomDataNode>;
     }
 
     /**
@@ -1526,7 +1589,7 @@ declare namespace cytoscape {
      * source & target : These fields define an edge's relationship to nodes, and this relationship can not be changed after creation.
      * parent: The parent field defines the parent (compound) node.
      */
-    interface CollectionData {
+    interface CollectionData<CustomDataNode = any> {
         /**
          * Read and write developer-defined data associated with the elements
          * http://js.cytoscape.org/#eles.data
@@ -1536,7 +1599,8 @@ declare namespace cytoscape {
          * Get a particular data field for the element.
          * @param name The name of the field to get.
          */
-        data(name?: string): any;
+        data(name: keyof CustomDataNode): CustomDataNode[keyof CustomDataNode];
+        data(): CustomDataNode;
         /**
          * Set a particular data field for the element.
          * @param name The name of the field to set.
@@ -1582,7 +1646,7 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#collection/data
      */
-    interface SingularData {
+    interface SingularData<CustomDataNode = any> {
         /**
          * Get or set the scratchpad at a particular namespace,
          * where temporary or non-JSON data can be stored.
@@ -1630,7 +1694,7 @@ declare namespace cytoscape {
          * Get whether the element is a node.
          * http://js.cytoscape.org/#ele.isNode
          */
-        isNode(): this is NodeSingular;
+        isNode(): this is NodeSingular<CustomDataNode>;
 
         /**
          * Get whether the element is an edge.
@@ -1816,7 +1880,6 @@ declare namespace cytoscape {
         renderedPoint(pos: { [name: string]: number }): this;
 
         /**
-         *
          * http://js.cytoscape.org/#node.relativePosition
          */
         /**
@@ -1860,8 +1923,8 @@ declare namespace cytoscape {
      * @param ele The element being iterated over for which the function should return a position to set.
      * @param ix The index of the element when iterating over the elements in the collection.
      */
-    type ElementPositionFunction = (ele: NodeSingular, ix: number) => Position;
-    type ElementCollectionFunction = (ele: NodeSingular, ix: number, eles: CollectionArgument) => Position;
+    type ElementPositionFunction<CustomDataNode = any> = (ele: NodeSingular<CustomDataNode>, ix: number) => Position;
+    type ElementCollectionFunction<CustomDataNode = any> = (ele: NodeSingular<CustomDataNode>, ix: number, eles: CollectionArgument) => Position;
 
     /**
      * http://js.cytoscape.org/#collection/position--dimensions
@@ -1995,7 +2058,7 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#collection/layout
      */
-    interface CollectionLayout {
+    interface CollectionLayout<CustomDataNode> {
         /**
          * Get a new layout, which can be used to algorithmically position the nodes in the collection.
          * This function is useful for running a layout on a subset of the elements in the graph, perhaps in parallel to other layouts.
@@ -2006,9 +2069,9 @@ declare namespace cytoscape {
          *
          * @param options The layout options.
          */
-        layout(options: LayoutOptions): Layouts;
-        makeLayout(options: LayoutOptions): Layouts;
-        createLayout(options: LayoutOptions): Layouts;
+        layout(options: LayoutOptions<CustomDataNode>): Layouts;
+        makeLayout(options: LayoutOptions<CustomDataNode>): Layouts;
+        createLayout(options: LayoutOptions<CustomDataNode>): Layouts;
     }
 
     /**
@@ -2139,11 +2202,13 @@ declare namespace cytoscape {
         toggleClass(classes: ClassNames, toggle?: boolean): this;
         /**
          * Replace the current list of classes on the elements with the specified list.
-         * @param classes A space-separated list of class names that replaces the current class list.
+         * @param classes A space-separated list or array of class names that replaces the current class list.
          * http://js.cytoscape.org/#eles.classes
-         * Note: can be used to clear all classes (no arguments).
+         * Note: can be used to clear all classes (empty string or array).
          */
-        classes(classes?: ClassNames): this;
+        classes(classes: ClassNames): this;
+        classes(classes: ClassNames | undefined): this | string[];
+        classes(): string[];
         /**
          * Add classes to the elements, and then remove the classes after a specified duration.
          * @param classes A space-separated list of class names to flash on the elements.
@@ -2451,7 +2516,9 @@ declare namespace cytoscape {
          * eles - The collection of elements being iterated.
          * @param thisArg [optional] The value for this within the iterating function.
          */
+        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
         each(each: (ele: TIn, i: number, eles: this) => void | boolean, thisArg?: any): this;
+        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
         forEach(each: (ele: TIn, i: number, eles: this) => void | boolean, thisArg?: any): this;
 
         /**
@@ -2493,6 +2560,8 @@ declare namespace cytoscape {
          * Get the collection as an array, maintaining the order of the elements.
          */
         toArray(): TOut[];
+
+        [Symbol.iterator](): Iterator<TOut>;
     }
 
     /**
@@ -2536,7 +2605,7 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#collection/building--filtering
      */
-    interface CollectionBuildingFiltering<TIn, TOut> {
+    interface CollectionBuildingFiltering<TIn, TOut, CustomDataNode> {
         /**
          * Get an element in the collection from its ID in a very performant way.
          * @param id The ID of the element to get.
@@ -2555,9 +2624,9 @@ declare namespace cytoscape {
         union: CollectionBuildingUnionFunc;
         u: CollectionBuildingUnionFunc;
         add: CollectionBuildingUnionFunc;
-        '+': CollectionBuildingUnionFunc;
+        "+": CollectionBuildingUnionFunc;
         or: CollectionBuildingUnionFunc;
-        '|': CollectionBuildingUnionFunc;
+        "|": CollectionBuildingUnionFunc;
 
         /**
          * Get a new collection, resulting from the collection without some specified elements.
@@ -2565,11 +2634,11 @@ declare namespace cytoscape {
          */
         difference: CollectionBuildingDifferenceFunc;
         subtract: CollectionBuildingDifferenceFunc;
-        '\\': CollectionBuildingDifferenceFunc;
+        "\\": CollectionBuildingDifferenceFunc;
         not: CollectionBuildingDifferenceFunc;
-        '!': CollectionBuildingDifferenceFunc;
+        "!": CollectionBuildingDifferenceFunc;
         relativeComplement: CollectionBuildingDifferenceFunc;
-        '-': CollectionBuildingDifferenceFunc;
+        "-": CollectionBuildingDifferenceFunc;
 
         /**
          * Get all elements in the graph that are not in the calling collection.
@@ -2587,8 +2656,8 @@ declare namespace cytoscape {
         intersect: CollectionBuildingIntersectionFunc;
         and: CollectionBuildingIntersectionFunc;
         n: CollectionBuildingIntersectionFunc;
-        '&': CollectionBuildingIntersectionFunc;
-        '.': CollectionBuildingIntersectionFunc;
+        "&": CollectionBuildingIntersectionFunc;
+        ".": CollectionBuildingIntersectionFunc;
 
         /**
          * Get the elements that are in the calling collection
@@ -2598,9 +2667,9 @@ declare namespace cytoscape {
         symmetricDifference: CollectionSymmetricDifferenceFunc;
         symdiff: CollectionSymmetricDifferenceFunc;
         xor: CollectionSymmetricDifferenceFunc;
-        '^': CollectionSymmetricDifferenceFunc;
-        '(+)': CollectionSymmetricDifferenceFunc;
-        '(-)': CollectionSymmetricDifferenceFunc;
+        "^": CollectionSymmetricDifferenceFunc;
+        "(+)": CollectionSymmetricDifferenceFunc;
+        "(-)": CollectionSymmetricDifferenceFunc;
 
         /**
          * Perform a traditional left/right diff on the two collections.
@@ -2688,7 +2757,7 @@ declare namespace cytoscape {
          * @param selector The selector to match against.
          * http://js.cytoscape.org/#eles.filter
          */
-        nodes(selector?: Selector): NodeCollection;
+        nodes(selector?: Selector): NodeCollection<CustomDataNode>;
         /**
          * Get the edges that match the specified selector.
          *
@@ -2878,22 +2947,22 @@ declare namespace cytoscape {
          */
         midpoint(): Position;
     }
-    interface EdgeSingularTraversing {
+    interface EdgeSingularTraversing<CustomDataNode = any> {
         /**
          * Get source node of this edge.
          * @param selector An optional selector that is used to filter the resultant collection.
          * http://js.cytoscape.org/#edge.source
          */
-        source(selector?: Selector): NodeSingular;
+        source(selector?: Selector): NodeSingular<CustomDataNode>;
 
         /**
          * Get target node of this edge.
          * @param selector An optional selector that is used to filter the resultant collection.
          * http://js.cytoscape.org/#edge.target
          */
-        target(selector?: Selector): NodeSingular;
+        target(selector?: Selector): NodeSingular<CustomDataNode>;
     }
-    interface EdgeCollectionTraversing {
+    interface EdgeCollectionTraversing<CustomDataNode = any> {
         // http://js.cytoscape.org/#collection/traversing
 
         /**
@@ -2901,21 +2970,21 @@ declare namespace cytoscape {
          *
          * @param selector [optional] An optional selector that is used to filter the resultant collection.
          */
-        connectedNodes(selector?: Selector): NodeCollection;
+        connectedNodes(selector?: Selector): NodeCollection<CustomDataNode>;
 
         /**
          * Get source nodes connected to the edges in the collection.
          *
          * @param selector [optional] An optional selector that is used to filter the resultant collection.
          */
-        sources(selector?: Selector): NodeCollection;
+        sources(selector?: Selector): NodeCollection<CustomDataNode>;
 
         /**
          * Get target nodes connected to the edges in the collection.
          *
          * @param selector [optional] An optional selector that is used to filter the resultant collection.
          */
-        targets(selector?: Selector): NodeCollection;
+        targets(selector?: Selector): NodeCollection<CustomDataNode>;
 
         /**
          * Get edges parallel to those in the collection.
@@ -2946,7 +3015,7 @@ declare namespace cytoscape {
          */
         codirectedEdges(selector?: Selector): EdgeCollection;
     }
-    interface NodeCollectionTraversing {
+    interface NodeCollectionTraversing<CustomDataNode> {
         // http://js.cytoscape.org/#collection/traversing
 
         /**
@@ -2977,14 +3046,14 @@ declare namespace cytoscape {
          *
          * @param selector [optional] An optional selector that is used to filter the resultant collection.
          */
-        roots(selector?: Selector): NodeCollection;
+        roots(selector?: Selector): NodeCollection<CustomDataNode>;
 
         /**
          * From the set of calling nodes, get the nodes which are leaves (i.e. no outgoing edges, as in a directed acyclic graph).
          *
          * @param selector [optional] An optional selector that is used to filter the resultant collection.
          */
-        leaves(selector?: Selector): NodeCollection;
+        leaves(selector?: Selector): NodeCollection<CustomDataNode>;
 
         /**
          * Get edges (and their targets) coming out of the nodes in the collection.
@@ -3016,7 +3085,6 @@ declare namespace cytoscape {
     }
 
     /**
-     *
      * http://js.cytoscape.org/#collection/algorithms
      */
 
@@ -3030,12 +3098,13 @@ declare namespace cytoscape {
      * i - The index indicating this node is the ith visited node.
      * depth - How many edge hops away this node is from the root nodes.
      */
-    type SearchVisitFunction = (
-        v: NodeSingular,
+    type SearchVisitFunction<CustomDataNode = any> = (
+        v: NodeSingular<CustomDataNode>,
         e: EdgeSingular | undefined,
-        u: NodeSingular | undefined,
+        u: NodeSingular<CustomDataNode> | undefined,
         i: number,
         depth: number,
+        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
     ) => boolean | void;
     interface SearchFirstOptionsBase {
         /**
@@ -3060,7 +3129,7 @@ declare namespace cytoscape {
         roots: Selector | CollectionArgument;
     }
     type SearchFirstOptions = SearchFirstOptions1 | SearchFirstOptions2;
-    interface SearchFirstResult {
+    interface SearchFirstResult<CustomDataNode> {
         /**
          * The path of the search.
          * - The path returned includes edges such that if path[i] is a node, then path[i - 1] is the edge used to get to that node.
@@ -3071,7 +3140,7 @@ declare namespace cytoscape {
          * - If no node was found, then found is empty.
          * - If your handler function returns false, then the only the path up to that point is returned.
          */
-        found: NodeCollection;
+        found: NodeCollection<CustomDataNode>;
     }
 
     /**
@@ -3098,27 +3167,27 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#eles.dijkstra
      */
-    interface SearchDijkstraResult {
+    interface SearchDijkstraResult<CustomDataNode = any> {
         /**
          * Returns the distance from the source node to node.
          */
-        distanceTo(node: NodeSingular): number;
+        distanceTo(node: NodeSingular<CustomDataNode>): number;
 
         /**
          * Returns a collection containing the shortest path from the source node to node.
          * The path starts with the source node and includes the edges between the nodes in the path such that if pathTo(node)[i] is an edge,
          * then pathTo(node)[i-1] is the previous node in the path and pathTo(node)[i+1] is the next node in the path.
          */
-        pathTo(node: NodeSingular): CollectionReturnValue;
+        pathTo(node: NodeSingular<CustomDataNode>): CollectionReturnValue;
     }
     /**
      * http://js.cytoscape.org/#eles.aStar
      */
-    interface SearchAStarOptions {
+    interface SearchAStarOptions<CustomDataNode=any> {
         root: Selector | CollectionArgument;
         goal: Selector | CollectionArgument;
         weight?: WeightFn | undefined;
-        heuristic?(node: NodeCollection): number;
+        heuristic?(node: NodeCollection<CustomDataNode>): number;
         directed?: boolean | undefined;
     }
     /**
@@ -3141,11 +3210,11 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#eles.floydWarshall
      */
-    interface SearchFloydWarshallResult {
+    interface SearchFloydWarshallResult<CustomDataNode = any> {
         /**
          * Returns the distance from the source node to node.
          */
-        distance(fromNode: NodeSingular | CollectionSelection, toNode: NodeSingular | Selector): number;
+        distance(fromNode: NodeSingular<CustomDataNode> | CollectionSelection, toNode: NodeSingular<CustomDataNode> | Selector): number;
 
         /**
          * Returns a collection containing the shortest path from the source node to node.
@@ -3154,7 +3223,7 @@ declare namespace cytoscape {
          * then pathTo(node)[i-1] is the previous node in the path and pathTo(node)[i+1]
          * is the next node in the path.
          */
-        path(fromNode: NodeSingular | CollectionSelection, toNode: NodeSingular | Selector): CollectionReturnValue;
+        path(fromNode: NodeSingular<CustomDataNode> | CollectionSelection, toNode: NodeSingular<CustomDataNode> | Selector): CollectionReturnValue;
     }
 
     /**
@@ -3174,26 +3243,36 @@ declare namespace cytoscape {
          * edges from source to target (default false).
          */
         directed: boolean;
+        /**
+         * Indicating whether the algorithm should find and return
+         * negative weight cycles (default true).
+         */
+        findNegativeWeightCycles?: boolean | undefined;
     }
     /**
      * http://js.cytoscape.org/#eles.bellmanFord
      */
-    interface SearchBellmanFordResult {
+    interface SearchBellmanFordResult<CustomDataNode = any> {
         /**
          * function that computes the shortest path from root node to the argument node
          * (either objects or selector string)
          */
-        pathTo(node: NodeSingular | Selector): CollectionReturnValue;
+        pathTo(node: NodeSingular<CustomDataNode> | Selector): CollectionReturnValue;
 
         /**
          *  function that computes the shortest distance from root node to argument node
          * (either objects or selector string)
-         *
          */
-        distanceTo(node: NodeSingular | Selector): number;
+        distanceTo(node: NodeSingular<CustomDataNode> | Selector): number;
 
         /* true/false. If true, pathTo and distanceTo will be undefined */
         hasNegativeWeightCycle: boolean;
+
+        /**
+         * array of collections corresponding to the negative weight cycles found
+         * (only populated if the findNegativeWeightCycles option is set to true)
+         */
+        negativeWeightCycles: CollectionReturnValue[];
     }
 
     /**
@@ -3215,20 +3294,20 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#eles.pageRank
      */
-    interface SearchPageRankResult {
+    interface SearchPageRankResult<CustomDataNode=any> {
         /** function that computes the rank of a given node (either object or selector string) */
-        rank(node: NodeCollection): number;
+        rank(node: NodeCollection<CustomDataNode>): number;
     }
 
     /**
      * http://js.cytoscape.org/#eles.degreeCentrality
      */
-    interface SearchDegreeCentralityOptions {
+    interface SearchDegreeCentralityOptions<CustomDataNode = any> {
         /**
          * The root node (selector or collection) for which the
          * centrality calculation is made.
          */
-        root: NodeSingular | Selector;
+        root: NodeSingular<CustomDataNode> | Selector;
         /**  A function that returns the weight for the edge. */
         weight?(edge: EdgeSingular): number;
         /**
@@ -3281,26 +3360,26 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#eles.degreeCentralityNormalized
      */
-    interface SearchDegreeCentralityNormalizedResultUndirected {
+    interface SearchDegreeCentralityNormalizedResultUndirected<CustomDataNode = any> {
         /** the normalised degree centrality of the specified node */
-        degree(node: NodeSingular): any;
+        degree(node: NodeSingular<CustomDataNode>): any;
     }
-    interface SearchDegreeCentralityNormalizedResultDirected {
+    interface SearchDegreeCentralityNormalizedResultDirected<CustomDataNode = any> {
         /** the normalised indegree centrality of the specified node */
-        indegree(node: NodeSingular): any;
+        indegree(node: NodeSingular<CustomDataNode>): any;
 
         /** the normalised outdegree centrality of the specified node */
-        outdegree(node: NodeSingular): any;
+        outdegree(node: NodeSingular<CustomDataNode>): any;
     }
     /**
      * http://js.cytoscape.org/#eles.closenessCentrality
      */
-    interface SearchClosenessCentralityOptions {
+    interface SearchClosenessCentralityOptions<CustomDataNode = any> {
         /**
          * The root node (selector or collection) for which the
          * centrality calculation is made.
          */
-        root: NodeSingular | Selector;
+        root: NodeSingular<CustomDataNode> | Selector;
         /**  A function that returns the weight for the edge. */
         weight?(edge: EdgeSingular): number;
 
@@ -3337,8 +3416,11 @@ declare namespace cytoscape {
     }
     /**
      * http://js.cytoscape.org/#eles.closenessCentralityNormalized
-     * trivial
      */
+    interface SearchClosenessCentralityNormalizedResult<CustomDataNode = any> {
+        /** the normalised closeness centrality of the specified node */
+        closeness(node: NodeSingular<CustomDataNode>): any;
+    }
 
     /**
      * http://js.cytoscape.org/#eles.betweennessCentrality
@@ -3356,13 +3438,13 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#eles.betweennessCentrality
      */
-    interface SearchBetweennessResult {
+    interface SearchBetweennessResult<CustomDataNode = any> {
         /** returns the betweenness centrality of the specified node */
-        betweenness(node: NodeSingular): number;
+        betweenness(node: NodeSingular<CustomDataNode>): number;
 
         /** returns the normalised betweenness centrality of the specified node */
-        betweennessNormalized(node: NodeSingular): number;
-        betweennessNormalised(node: NodeSingular): number;
+        betweennessNormalized(node: NodeSingular<CustomDataNode>): number;
+        betweennessNormalised(node: NodeSingular<CustomDataNode>): number;
     }
 
     /**
@@ -3384,22 +3466,22 @@ declare namespace cytoscape {
      * trivial
      */
 
-    interface CollectionAlgorithms {
+    interface CollectionAlgorithms<CustomDataNode> {
         /**
          * Perform a breadth-first search within the elements in the collection.
          * @param options
          * http://js.cytoscape.org/#eles.breadthFirstSearch
          * @alias bfs
          */
-        breadthFirstSearch(options: SearchFirstOptions): SearchFirstResult;
-        bfs(options: SearchFirstOptions): SearchFirstResult;
+        breadthFirstSearch(options: SearchFirstOptions): SearchFirstResult<CustomDataNode>;
+        bfs(options: SearchFirstOptions): SearchFirstResult<CustomDataNode>;
         /**
          * Perform a depth-first search within the elements in the collection.
          * http://js.cytoscape.org/#eles.depthFirstSearch
          * @alias dfs
          */
-        depthFirstSearch(options: SearchFirstOptions): SearchFirstResult;
-        dfs(options: SearchFirstOptions): SearchFirstResult;
+        depthFirstSearch(options: SearchFirstOptions): SearchFirstResult<CustomDataNode>;
+        dfs(options: SearchFirstOptions): SearchFirstResult<CustomDataNode>;
 
         /**
          * Perform Dijkstra's algorithm on the elements in the collection.
@@ -3413,7 +3495,7 @@ declare namespace cytoscape {
          * This finds the shortest path from the root node to the goal node.
          * http://js.cytoscape.org/#eles.aStar
          */
-        aStar(options: SearchAStarOptions): SearchAStarResult;
+        aStar(options: SearchAStarOptions<CustomDataNode>): SearchAStarResult;
         /**
          * Perform the Floyd Warshall search algorithm on the elements in the collection.
          * This finds the shortest path between all pairs of nodes.
@@ -3440,33 +3522,33 @@ declare namespace cytoscape {
         kargerStein(): {
             cut: EdgeCollection;
             components: CollectionReturnValue;
-            partitionFirst: NodeCollection;
-            partitionSecond: NodeCollection;
+            partitionFirst: NodeCollection<CustomDataNode>;
+            partitionSecond: NodeCollection<CustomDataNode>;
         };
         /**
          * finds the biconnected components in an undirected graph,
          * as well as their respective cut vertices, using an algorithm due to Hopcroft and Tarjan.
          * http://js.cytoscape.org/#eles.hopcroftTarjanBiconnected
          */
-        hopcroftTarjanBiconnected(): { cut: NodeCollection; components: CollectionReturnValue };
+        hopcroftTarjanBiconnected(): { cut: NodeCollection<CustomDataNode>; components: CollectionReturnValue };
         /**
          * Finds the biconnected components in an undirected graph,
          * as well as their respective cut vertices, using an algorithm due to Hopcroft and Tarjan.
          * http://js.cytoscape.org/#eles.hopcroftTarjanBiconnected
          */
-        hopcroftTarjanBiconnectedComponents(): { cut: NodeCollection; components: CollectionReturnValue };
+        hopcroftTarjanBiconnectedComponents(): { cut: NodeCollection<CustomDataNode>; components: CollectionReturnValue };
         /**
          * Finds the biconnected components in an undirected graph,
          * as well as their respective cut vertices, using an algorithm due to Hopcroft and Tarjan.
          * http://js.cytoscape.org/#eles.hopcroftTarjanBiconnected
          */
-        htb(): { cut: NodeCollection; components: CollectionReturnValue };
+        htb(): { cut: NodeCollection<CustomDataNode>; components: CollectionReturnValue };
         /**
          * Finds the biconnected components in an undirected graph,
          * as well as their respective cut vertices, using an algorithm due to Hopcroft and Tarjan.
          * http://js.cytoscape.org/#eles.hopcroftTarjanBiconnected
          */
-        htbc(): { cut: NodeCollection; components: CollectionReturnValue };
+        htbc(): { cut: NodeCollection<CustomDataNode>; components: CollectionReturnValue };
         /**
          * Finds the strongly connected components of a directed graph using Tarjan's algorithm.
          * http://js.cytoscape.org/#eles.tarjanStronglyConnected
@@ -3491,7 +3573,7 @@ declare namespace cytoscape {
          * Rank the nodes in the collection using the Page Rank algorithm.
          * http://js.cytoscape.org/#eles.pageRank
          */
-        pageRank(options: SearchPageRankOptions): SearchPageRankResult;
+        pageRank(options: SearchPageRankOptions): SearchPageRankResult<CustomDataNode>;
         /**
          * Considering only the elements in the calling collection,
          * calculate the degree centrality of the specified root node.
@@ -3523,7 +3605,7 @@ declare namespace cytoscape {
          */
         closenessCentralityNormalized(
             options: SearchClosenessCentralityNormalizedOptions,
-        ): SearchDegreeCentralityNormalizedResultDirected | SearchDegreeCentralityNormalizedResultUndirected;
+        ): SearchClosenessCentralityNormalizedResult;
         /**
          * Considering only the elements in the calling collection,
          * calculate the betweenness centrality of the nodes.
@@ -3561,60 +3643,60 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#collection/compound-nodes
      */
-    interface NodeCollectionCompound {
+    interface NodeCollectionCompound<CustomDataNode> {
         /**
          * Get the compound parent node of each node in the collection.
          * @param selector A selector used to filter the resultant collection.
          * http://js.cytoscape.org/#nodes.parent
          */
-        parent(selector?: Selector): NodeCollection;
+        parent(selector?: Selector): NodeCollection<CustomDataNode>;
         /**
          * Get all compound ancestor nodes
          * (i.e. parents, parents' parents, etc.) of each node in the collection.
          * @param selector A selector used to filter the resultant collection.
          * http://js.cytoscape.org/#nodes.ancestors
          */
-        ancestors(selector?: Selector): NodeCollection;
-        parents(selector?: Selector): NodeCollection;
+        ancestors(selector?: Selector): NodeCollection<CustomDataNode>;
+        parents(selector?: Selector): NodeCollection<CustomDataNode>;
         /**
          * Get all compound ancestors common to all the nodes in the collection,
          * starting with the closest and getting progressively farther.
          * @param selector A selector used to filter the resultant collection.
          * http://js.cytoscape.org/#nodes.commonAncestors
          */
-        commonAncestors(selector?: Selector): NodeCollection;
+        commonAncestors(selector?: Selector): NodeCollection<CustomDataNode>;
         /**
          * Get all orphan (i.e. has no compound parent) nodes in the calling collection.
          * @param selector A selector used to filter the resultant collection.
          * http://js.cytoscape.org/#nodes.orphans
          */
-        orphans(selector?: Selector): NodeCollection;
+        orphans(selector?: Selector): NodeCollection<CustomDataNode>;
         /**
          * Get all nonorphan (i.e. has a compound parent) nodes in the calling collection.
          * @param selector A selector used to filter the resultant collection.
          * http://js.cytoscape.org/#nodes.nonorphans
          */
-        nonorphans(selector?: Selector): NodeCollection;
+        nonorphans(selector?: Selector): NodeCollection<CustomDataNode>;
         /**
          * Get all compound child (i.e. direct descendant) nodes of each node in the collection.
          * @param selector A selector used to filter the resultant collection.
          * http://js.cytoscape.org/#nodes.children
          */
-        children(selector?: Selector): NodeCollection;
+        children(selector?: Selector): NodeCollection<CustomDataNode>;
         /**
          * Get all compound descendant (i.e. children, children's children, etc.)
          * nodes of each node in the collection.
          * @param selector A selector used to filter the resultant collection.
          * http://js.cytoscape.org/#nodes.descendants
          */
-        descendants(selector?: Selector): NodeCollection;
+        descendants(selector?: Selector): NodeCollection<CustomDataNode>;
         /**
          * Get all sibling (i.e. same compound parent)
          * nodes of each node in the collection.
          * @param selector A selector used to filter the resultant collection.
          * http://js.cytoscape.org/#nodes.siblings
          */
-        siblings(selector?: Selector): NodeCollection;
+        siblings(selector?: Selector): NodeCollection<CustomDataNode>;
     }
 
     /**
@@ -3646,7 +3728,7 @@ declare namespace cytoscape {
      * 'single' : a new selection made by the user becomes the entire set of currently
      *            selected elements (i.e. the previous elements are unselected)
      */
-    type SelectionType = 'additive' | 'single';
+    type SelectionType = "additive" | "single";
 
     /**
      * http://js.cytoscape.org/#ele.group
@@ -3655,13 +3737,13 @@ declare namespace cytoscape {
      * 'nodes'
      * 'edges'
      */
-    type ElementGroup = 'nodes' | 'edges';
+    type ElementGroup = "nodes" | "edges";
 
     /**
      * 'x' : x coordinate
      * 'y' : y coordinate
      */
-    type PositionDimension = 'x' | 'y';
+    type PositionDimension = "x" | "y";
 
     /**
      * Usually temp or nonserialisable data can be stored.
@@ -3694,10 +3776,10 @@ declare namespace cytoscape {
          */
         type MapperFunction<Element, Type> = (ele: Element) => Type;
 
-        type PropertyValue<SingularType extends NodeSingular | EdgeSingular | cytoscape.Core, Type> =
+        type PropertyValue<SingularType extends NodeSingular<CustomDataNode> | EdgeSingular | cytoscape.Core, Type, CustomDataNode=any> =
             | Type
             | MapperFunction<SingularType, Type>;
-        type PropertyValueNode<Type> = PropertyValue<NodeSingular, Type>;
+        type PropertyValueNode<Type, CustomDataNode=any> = PropertyValue<NodeSingular<CustomDataNode>, Type>;
         type PropertyValueEdge<Type> = PropertyValue<EdgeSingular, Type>;
         type PropertyValueCore<Type> = PropertyValue<cytoscape.Core, Type>;
 
@@ -3710,32 +3792,32 @@ declare namespace cytoscape {
          * 'polygon' is a custom polygon specified via shape-polygon-points.
          */
         type NodeShape =
-            | 'rectangle'
-            | 'roundrectangle'
-            | 'ellipse'
-            | 'triangle'
-            | 'pentagon'
-            | 'hexagon'
-            | 'heptagon'
-            | 'octagon'
-            | 'star'
-            | 'barrel'
-            | 'diamond'
-            | 'vee'
-            | 'rhomboid'
-            | 'polygon'
-            | 'tag'
-            | 'round-rectangle'
-            | 'round-triangle'
-            | 'round-diamond'
-            | 'round-pentagon'
-            | 'round-hexagon'
-            | 'round-heptagon'
-            | 'round-octagon'
-            | 'round-tag'
-            | 'cut-rectangle'
-            | 'bottom-round-rectangle'
-            | 'concave-hexagon';
+            | "rectangle"
+            | "roundrectangle"
+            | "ellipse"
+            | "triangle"
+            | "pentagon"
+            | "hexagon"
+            | "heptagon"
+            | "octagon"
+            | "star"
+            | "barrel"
+            | "diamond"
+            | "vee"
+            | "rhomboid"
+            | "polygon"
+            | "tag"
+            | "round-rectangle"
+            | "round-triangle"
+            | "round-diamond"
+            | "round-pentagon"
+            | "round-hexagon"
+            | "round-heptagon"
+            | "round-octagon"
+            | "round-tag"
+            | "cut-rectangle"
+            | "bottom-round-rectangle"
+            | "concave-hexagon";
 
         /**
          * A space-separated list of numbers ranging on [-1, 1],
@@ -3748,21 +3830,23 @@ declare namespace cytoscape {
         /**
          * The line style; may be solid, dotted, dashed, or double
          */
-        type LineStyle = 'solid' | 'dotted' | 'dashed' | 'double';
+        type LineStyle = "solid" | "dotted" | "dashed" | "double";
 
         /**
          * http://js.cytoscape.org/#style/node-body
          */
-        interface Node
-            extends Partial<Overlay>,
+        interface Node<CustomDataNode>
+            extends
+                Partial<Overlay>,
                 PaddingNode,
-                Partial<Labels<NodeSingular>>,
+                Partial<Labels<NodeSingular<CustomDataNode>, CustomDataNode>>,
                 BackgroundImage,
                 Partial<Ghost>,
-                Partial<Visibility<NodeSingular>>,
+                Partial<Visibility<NodeSingular<CustomDataNode>, CustomDataNode>>,
                 Partial<PieChartBackground>,
-                Partial<Events<NodeSingular>>,
-                Partial<TransitionAnimation> {
+                Partial<Events<NodeSingular<CustomDataNode>>>,
+                Partial<TransitionAnimation>
+        {
             /**
              * The CSS content field
              */
@@ -3783,38 +3867,38 @@ declare namespace cytoscape {
              * The shape of the node’s body.
              */
             shape?: PropertyValueNode<NodeShape> | undefined;
-            'shape-polygon-points'?: PropertyValueNode<ShapePolygonPoints> | undefined;
+            "shape-polygon-points"?: PropertyValueNode<ShapePolygonPoints> | undefined;
             backgroundColor?: PropertyValueNode<Colour> | undefined;
             /**
              * The colour of the node’s body.
              */
-            'background-color'?: PropertyValueNode<Colour> | undefined;
+            "background-color"?: PropertyValueNode<Colour> | undefined;
             /**
              * Blackens the node’s body for values from 0 to 1;
              * whitens the node’s body for values from 0 to -1.
              */
-            'background-blacken'?: PropertyValueNode<number> | undefined;
+            "background-blacken"?: PropertyValueNode<number> | undefined;
             /**
              * The opacity level of the node’s background colour.
              */
-            'background-opacity'?: PropertyValueNode<number> | undefined;
+            "background-opacity"?: PropertyValueNode<number> | undefined;
             /**
              * The size of the node’s border.
              */
-            'border-width'?: PropertyValueNode<number | string> | undefined;
+            "border-width"?: PropertyValueNode<number | string> | undefined;
             /**
              * The style of the node’s border.
              */
-            'border-style'?: PropertyValueNode<LineStyle> | undefined;
+            "border-style"?: PropertyValueNode<LineStyle> | undefined;
             /**
              * The colour of the node’s border.
              */
-            'border-color'?: PropertyValueNode<Colour> | undefined;
+            "border-color"?: PropertyValueNode<Colour> | undefined;
             /**
              * The opacity of the node’s border.
              * A value between [0 1].
              */
-            'border-opacity'?: PropertyValueNode<number> | undefined;
+            "border-opacity"?: PropertyValueNode<number> | undefined;
         }
 
         /**
@@ -3824,10 +3908,10 @@ declare namespace cytoscape {
          * or it can be used to add spacing between a compound node parent and its children.
          */
         interface PaddingNode {
-            'padding-left'?: PropertyValueNode<string> | undefined;
-            'padding-right'?: PropertyValueNode<string> | undefined;
-            'padding-top'?: PropertyValueNode<string> | undefined;
-            'padding-bottom'?: PropertyValueNode<string> | undefined;
+            "padding-left"?: PropertyValueNode<string> | undefined;
+            "padding-right"?: PropertyValueNode<string> | undefined;
+            "padding-top"?: PropertyValueNode<string> | undefined;
+            "padding-bottom"?: PropertyValueNode<string> | undefined;
         }
 
         interface Dictionary {
@@ -3847,31 +3931,35 @@ declare namespace cytoscape {
              * You may use a data URI to use embedded images,
              * thereby saving a HTTP request.
              */
-            'background-image'?: PropertyValueNode<string> | undefined;
+            "background-image"?: PropertyValueNode<string> | PropertyValueNode<string[]> | undefined;
             /**
              * All images are loaded with a crossorigin attribute which may be `anonymous` or
              * `use-credentials`.
              *
              * The default is set to `anonymous`.
              */
-            'background-image-crossorigin'?: PropertyValueNode<'anonymous' | 'use-credentials'>;
+            "background-image-crossorigin"?:
+                | PropertyValueNode<"anonymous" | "use-credentials">
+                | PropertyValueNode<Array<"anonymous" | "use-credentials">>;
             /**
              * The opacity of the background image. [0 1]
              */
-            'background-image-opacity'?: PropertyValueNode<number> | undefined;
+            "background-image-opacity"?: PropertyValueNode<number> | PropertyValueNode<number[]> | undefined;
             /**
              * Determines whether background image is smoothed (`yes`, default) or not (`no`).
              * This is only a hint, and the browser may or may not respect the
              * value set for this property.
              */
-            'background-image-smoothing'?: PropertyValueNode<'yes' | 'no'>;
+            "background-image-smoothing"?: PropertyValueNode<"yes" | "no"> | PropertyValueNode<Array<"yes" | "no">>;
             /**
              * Determines whether background image is within (`inside`)
              * or over top of the node (`over`).
              *
              * The default is set to `inside`.
              */
-            'background-image-containment'?: PropertyValueNode<'inside' | 'over'>;
+            "background-image-containment"?:
+                | PropertyValueNode<"inside" | "over">
+                | PropertyValueNode<Array<"inside" | "over">>;
             /**
              * Specifies the width of the image.
              * A percent value (e.g. 50%) may be used to set
@@ -3881,7 +3969,10 @@ declare namespace cytoscape {
              * in calculating the fitting — thereby overriding the aspect ratio.
              * The auto value is used by default, which uses the width of the image.
              */
-            'background-width'?: PropertyValueNode<number | string> | undefined;
+            "background-width"?:
+                | PropertyValueNode<number | string>
+                | PropertyValueNode<Array<number | string>>
+                | undefined;
             /**
              * Specifies the height of the image.
              * A percent value (e.g. 50%) may be used to set the image
@@ -3891,58 +3982,80 @@ declare namespace cytoscape {
              * the fitting — thereby overriding the aspect ratio.
              * The auto value is used by default, which uses the height of the image.
              */
-            'background-height'?: PropertyValueNode<number | string> | undefined;
+            "background-height"?:
+                | PropertyValueNode<number | string>
+                | PropertyValueNode<Array<number | string>>
+                | undefined;
             /**
              * How the background image is fit to the node;
              * may be none for original size,
              * contain to fit inside node,
              * or cover to cover the node.
              */
-            'background-fit'?: PropertyValueNode<'none' | 'contain' | 'cover'> | undefined;
+            "background-fit"?:
+                | PropertyValueNode<"none" | "contain" | "cover">
+                | PropertyValueNode<Array<"none" | "contain" | "cover">>
+                | undefined;
             /**
              * Whether to repeat the background image;
              * may be no-repeat, repeat-x, repeat-y, or repeat.
              */
-            'background-repeat'?: PropertyValueNode<'no-repeat' | 'repeat-x' | 'repeat-y' | 'repeat'> | undefined;
+            "background-repeat"?:
+                | PropertyValueNode<"no-repeat" | "repeat-x" | "repeat-y" | "repeat">
+                | PropertyValueNode<Array<"no-repeat" | "repeat-x" | "repeat-y" | "repeat">>
+                | undefined;
             /**
              * The x position of the background image,
              * measured in percent(e.g. `'50%'`) or pixels (e.g. `'10px'`).
              */
-            'background-position-x'?: PropertyValueNode<number | string> | undefined;
+            "background-position-x"?:
+                | PropertyValueNode<number | string>
+                | PropertyValueNode<Array<number | string>>
+                | undefined;
             /**
              * The y position of the background image,
              * measured in percent(e.g. `'50%'`) or pixels (e.g. `'10px'`).
              */
-            'background-position-y'?: PropertyValueNode<number | string> | undefined;
+            "background-position-y"?:
+                | PropertyValueNode<number | string>
+                | PropertyValueNode<Array<number | string>>
+                | undefined;
             /**
              * The x offset of the background image,
              * measured in percent(e.g. `'50%'`) or pixels (e.g. `'10px'`).
              */
-            'background-offset-x'?: PropertyValueNode<number | string>;
+            "background-offset-x"?: PropertyValueNode<number | string> | PropertyValueNode<Array<number | string>>;
             /**
              * The y offset of the background image,
              * measured in percent(e.g. `'50%'`) or pixels (e.g. `'10px'`).
              */
-            'background-offset-y'?: PropertyValueNode<number | string>;
+            "background-offset-y"?: PropertyValueNode<number | string> | PropertyValueNode<Array<number | string>>;
             /**
              * Changes whether the width is calculated relative to the width of the node or
              * the width in addition to the padding; may be inner or include-padding.
              *
              * If not specified, include-padding is used by default.
              */
-            'background-width-relative-to'?: PropertyValueNode<'inner' | 'include-padding'>;
+            "background-width-relative-to"?:
+                | PropertyValueNode<"inner" | "include-padding">
+                | PropertyValueNode<Array<"inner" | "include-padding">>;
             /**
              * Changes whether the height is calculated relative to the height of the node or
              * the height in addition to the padding; may be `inner` or `include-padding`.
              *
              * If not specified, `include-padding` is used by default.
              */
-            'background-height-relative-to'?: PropertyValueNode<'inner' | 'include-padding'>;
+            "background-height-relative-to"?:
+                | PropertyValueNode<"inner" | "include-padding">
+                | PropertyValueNode<Array<"inner" | "include-padding">>;
             /**
              * How background image clipping is handled;
              * may be node for clipped to node shape or none for no clipping.
              */
-            'background-clip'?: PropertyValueNode<'clipped' | 'none'> | undefined;
+            "background-clip"?:
+                | PropertyValueNode<"node" | "none">
+                | PropertyValueNode<Array<"node" | "none">>
+                | undefined;
             /**
              * Specifies a padding size (e.g. 20) that expands the bounding box of the node in
              * all directions. This allows for images to be drawn outside of the normal bounding
@@ -3952,7 +4065,7 @@ declare namespace cytoscape {
              * `bounds-expansions` accepts 1 value (for all directions),
              * 2 values, ([topAndBottom, leftAndRight]) or 4 values ([top, right, bottom, left]).
              */
-            'bounds-expansion'?: PropertyValueNode<
+            "bounds-expansion"?: PropertyValueNode<
                 | number
                 | string
                 | [number | string, number | string]
@@ -3968,19 +4081,19 @@ declare namespace cytoscape {
             /**
              * Whether to use the ghost effect; may be yes or no.
              */
-            ghost: PropertyValueNode<'yes' | 'no'>;
+            ghost: PropertyValueNode<"yes" | "no">;
             /**
              * The horizontal offset used to position the ghost effect.
              */
-            'ghost-offset-x': PropertyValueNode<number>;
+            "ghost-offset-x": PropertyValueNode<number>;
             /**
              * The vertical offset used to position the ghost effect.
              */
-            'ghost-offset-y': PropertyValueNode<number>;
+            "ghost-offset-y": PropertyValueNode<number>;
             /**
              * The opacity of the ghost effect.
              */
-            'ghost-opacity': PropertyValueNode<number>;
+            "ghost-opacity": PropertyValueNode<number>;
         }
 
         /**
@@ -4006,29 +4119,223 @@ declare namespace cytoscape {
              *
              * The diameter of the pie, measured as a percent of node size (e.g. 100%) or an absolute length (e.g. 25px).
              */
-            'pie-size': PropertyValueNode<string>;
+            "pie-size": PropertyValueNode<string>;
             /**
              * @deprecated
              *
              * The colour of the node’s ith pie chart slice.
              */
-            'pie-i-background-color': PropertyValueNode<Colour>;
+            "pie-i-background-color": PropertyValueNode<Colour>;
             /**
              * @deprecated
              *
              * The size of the node’s ith pie chart slice, measured in percent (e.g. 25% or 25).
              */
-            'pie-i-background-size': PropertyValueNode<number>;
+            "pie-i-background-size": PropertyValueNode<number>;
             /**
              * @deprecated
              *
              * The opacity of the node’s ith pie chart slice.
              */
-            'pie-i-background-opacity': PropertyValueNode<number>;
+            "pie-i-background-opacity": PropertyValueNode<number>;
+
+            /**
+             * The colour of the node’s 1st pie chart slice.
+             */
+            "pie-1-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 1st pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-1-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 1st pie chart slice.
+             */
+            "pie-1-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 2nd pie chart slice.
+             */
+            "pie-2-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 2nd pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-2-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 2nd pie chart slice.
+             */
+            "pie-2-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 3rd pie chart slice.
+             */
+            "pie-3-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 3rd pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-3-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 3rd pie chart slice.
+             */
+            "pie-3-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 4th pie chart slice.
+             */
+            "pie-4-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 4th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-4-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 4th pie chart slice.
+             */
+            "pie-4-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 5th pie chart slice.
+             */
+            "pie-5-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 5th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-5-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 5th pie chart slice.
+             */
+            "pie-5-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 6th pie chart slice.
+             */
+            "pie-6-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 6th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-6-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 6th pie chart slice.
+             */
+            "pie-6-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 7th pie chart slice.
+             */
+            "pie-7-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 7th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-7-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 7th pie chart slice.
+             */
+            "pie-7-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 8th pie chart slice.
+             */
+            "pie-8-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 8th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-8-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 8th pie chart slice.
+             */
+            "pie-8-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 9th pie chart slice.
+             */
+            "pie-9-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 9th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-9-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 9th pie chart slice.
+             */
+            "pie-9-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 10th pie chart slice.
+             */
+            "pie-10-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 10th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-10-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 10th pie chart slice.
+             */
+            "pie-10-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 11th pie chart slice.
+             */
+            "pie-11-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 11th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-11-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 11th pie chart slice.
+             */
+            "pie-11-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 12th pie chart slice.
+             */
+            "pie-12-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 12th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-12-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 12th pie chart slice.
+             */
+            "pie-12-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 13th pie chart slice.
+             */
+            "pie-13-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 13th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-13-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 13th pie chart slice.
+             */
+            "pie-13-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 14th pie chart slice.
+             */
+            "pie-14-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 14th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-14-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 14th pie chart slice.
+             */
+            "pie-14-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 15th pie chart slice.
+             */
+            "pie-15-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 15th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-15-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 15th pie chart slice.
+             */
+            "pie-15-background-opacity": PropertyValueNode<number>;
+            /**
+             * The colour of the node’s 16th pie chart slice.
+             */
+            "pie-16-background-color": PropertyValueNode<Colour>;
+            /**
+             * The size of the node’s 16th pie chart slice, measured in percent (e.g. 25% or 25).
+             */
+            "pie-16-background-size": PropertyValueNode<number>;
+            /**
+             * The opacity of the node’s 16th pie chart slice.
+             */
+            "pie-16-background-opacity": PropertyValueNode<number>;
         }
 
-        interface Edge
-            extends EdgeLine,
+        interface Edge<CustomDataNode>
+            extends
+                EdgeLine,
                 EdgeArrow,
                 Partial<Gradient>,
                 Partial<Overlay>,
@@ -4038,11 +4345,12 @@ declare namespace cytoscape {
                 Partial<HaystackEdges>,
                 Partial<SegmentsEdges>,
                 Partial<TaxiEdges>,
-                Partial<Visibility<EdgeSingular>>,
-                Partial<Labels<EdgeSingular>>,
+                Partial<Visibility<EdgeSingular, CustomDataNode>>,
+                Partial<Labels<EdgeSingular, CustomDataNode>>,
                 Partial<Events<EdgeSingular>>,
                 Partial<EdgeEndpoints<EdgeSingular>>,
-                Partial<TransitionAnimation> {}
+                Partial<TransitionAnimation>
+        {}
 
         /**
          * These properties affect the styling of an edge’s line:
@@ -4065,25 +4373,25 @@ declare namespace cytoscape {
              * Smaller node shapes, like triangle, will not be as aesthetically pleasing.
              * Also note that edge arrows are unsupported for haystack edges.
              */
-            'curve-style'?:
-                | PropertyValueEdge<'haystack' | 'straight' | 'bezier' | 'unbundled-bezier' | 'segments' | 'taxi'>
+            "curve-style"?:
+                | PropertyValueEdge<"haystack" | "straight" | "bezier" | "unbundled-bezier" | "segments" | "taxi">
                 | undefined;
             /**
              * The colour of the edge’s line.
              */
-            'line-color'?: PropertyValueEdge<Colour> | undefined;
+            "line-color"?: PropertyValueEdge<Colour> | undefined;
             /**
              * The style of the edge’s line.
              */
-            'line-style'?: PropertyValueEdge<LineStyle> | undefined;
+            "line-style"?: PropertyValueEdge<LineStyle> | undefined;
             /**
              * The cap of the edge's line.
              */
-            'line-cap'?: PropertyValueEdge<'butt' | 'round' | 'square'> | undefined;
+            "line-cap"?: PropertyValueEdge<"butt" | "round" | "square"> | undefined;
             /**
              * The filling style of the edge's line.
              */
-            'line-fill'?: PropertyValueEdge<'solid' | 'linear-gradient' | 'radial-gradient'> | undefined;
+            "line-fill"?: PropertyValueEdge<"solid" | "linear-gradient" | "radial-gradient"> | undefined;
             /**
              * The opacity of the edge’s line and arrow. Useful if you wish to have a separate opacity for the edge
              * label versus the edge line. Note that the opacity value of the edge element affects the effective
@@ -4091,23 +4399,23 @@ declare namespace cytoscape {
              *
              * Value between `0` and `1` inclusive.
              */
-            'line-opacity'?: PropertyValueEdge<number>;
+            "line-opacity"?: PropertyValueEdge<number>;
             /**
              * The dashed line pattern which specifies alternating lengths of lines and gaps.
              */
-            'line-dash-pattern'?: Array<PropertyValueEdge<number>> | undefined;
+            "line-dash-pattern"?: Array<PropertyValueEdge<number>> | undefined;
             /**
              * The dashed line offset.
              */
-            'line-dash-offset'?: PropertyValueEdge<number> | undefined;
+            "line-dash-offset"?: PropertyValueEdge<number> | undefined;
             /**
              * The distance the edge ends from its target.
              */
-            'target-distance-from-node'?: PropertyValueEdge<number> | undefined;
+            "target-distance-from-node"?: PropertyValueEdge<number> | undefined;
             /**
              * The distance the edge ends from its source.
              */
-            'source-distance-from-node'?: PropertyValueEdge<number> | undefined;
+            "source-distance-from-node"?: PropertyValueEdge<number> | undefined;
         }
 
         /**
@@ -4119,12 +4427,12 @@ declare namespace cytoscape {
             /**
              * The colors of the gradient stops.
              */
-            'line-gradient-stop-colors'?: Array<PropertyValueEdge<Colour>> | undefined;
+            "line-gradient-stop-colors"?: Array<PropertyValueEdge<Colour>> | undefined;
             /**
              * The positions of the gradient stops.
              * If not specified (or invalid), the stops will divide equally.
              */
-            'line-gradient-stop-positions'?: Array<PropertyValueEdge<number>> | undefined;
+            "line-gradient-stop-positions"?: Array<PropertyValueEdge<number>> | undefined;
         }
 
         /**
@@ -4137,13 +4445,13 @@ declare namespace cytoscape {
              * From the line perpendicular from source to target,
              * this value specifies the distance between successive bezier edges.
              */
-            'control-point-step-size': PropertyValueEdge<number>;
+            "control-point-step-size": PropertyValueEdge<number>;
             /**
              * A single value that overrides "control-point-step-size" with a manual value.
              * Because it overrides the step size, bezier edges with the same value will overlap.
              * Thus, it’s best to use this as a one- off value for particular edges if need be.
              */
-            'control-point-distance': PropertyValueEdge<number>;
+            "control-point-distance": PropertyValueEdge<number>;
             /**
              * A single value that weights control points along the line from source to target.
              * The value usually ranges on [0, 1], with
@@ -4151,7 +4459,7 @@ declare namespace cytoscape {
              * 1 towards the target node —
              * but larger or smaller values can also be used.
              */
-            'control-point-weight': PropertyValueEdge<number>;
+            "control-point-weight": PropertyValueEdge<number>;
             /**
              * With value intersection (default),
              * the line from source to target for "control-point-weight" is
@@ -4162,7 +4470,7 @@ declare namespace cytoscape {
              * — but it should be used carefully because you can create invalid
              * points that intersection would have automatically corrected.
              */
-            'edge-distances': PropertyValueEdge<'intersection' | 'node-position'>;
+            "edge-distances": PropertyValueEdge<"intersection" | "node-position">;
         }
         /**
          * Loop edges
@@ -4177,13 +4485,13 @@ declare namespace cytoscape {
              * position and it progresses clockwise for increasing positive values.
              * The default is `-45deg` (extending to the upper left).
              */
-            'loop-direction': PropertyValueEdge<string>;
+            "loop-direction": PropertyValueEdge<string>;
             /**
              * Determines the angle between the leaving and returning edges in loops. Positive
              * values result in clockwise looping and negative values result in counter-clockwise
              * looping. Default is `-90deg`.
              */
-            'loop-sweep': PropertyValueEdge<string>;
+            "loop-sweep": PropertyValueEdge<string>;
         }
         /**
          * Unbundled bezier edges
@@ -4197,7 +4505,7 @@ declare namespace cytoscape {
              * distance perpendicular to a line formed
              * from source to target, e.g. -20 20 - 20.
              */
-            'control-point-distances': PropertyValueEdge<number | number[] | string>;
+            "control-point-distances": PropertyValueEdge<number | number[] | string>;
             /**
              * A series of values that weights control points along
              * a line from source to target, e.g. 0.25 0.5 0.75.
@@ -4206,7 +4514,7 @@ declare namespace cytoscape {
              * 1 towards the target node
              * — but larger or smaller values can also be used.
              */
-            'control-point-weights': PropertyValueEdge<number | number[] | string>;
+            "control-point-weights": PropertyValueEdge<number | number[] | string>;
             /**
              * With value intersection (default),
              * the line from source to target for "control-point-weights"
@@ -4218,7 +4526,7 @@ declare namespace cytoscape {
              * — but it should be used carefully because you can create
              * invalid points that intersection would have automatically corrected.
              */
-            'edge-distances': PropertyValueEdge<'intersection' | 'node-position'>;
+            "edge-distances": PropertyValueEdge<"intersection" | "node-position">;
         }
         /**
          * Haystack edges
@@ -4233,7 +4541,7 @@ declare namespace cytoscape {
              * A value between 0 and 1 inclusive that indicates the relative radius used to position haystack edges on their connected nodes.
              * The outside of the node is at 1, and the centre of the node is at 0.
              */
-            'haystack-radius': PropertyValueEdge<number>;
+            "haystack-radius": PropertyValueEdge<number>;
         }
         /**
          * Segments edges
@@ -4244,13 +4552,13 @@ declare namespace cytoscape {
             /**
              * A series of values that specify for each segment point the distance perpendicular to a line formed from source to target, e.g. -20 20 - 20.
              */
-            'segment-distances': PropertyValueEdge<number | number[] | string>;
+            "segment-distances": PropertyValueEdge<number | number[] | string>;
             /**
              * A series of values that weights segment points along a line from source to target,
              * e.g. 0.25 0.5 0.75.A value usually ranges on [0, 1],
              * with 0 towards the source node and 1 towards the target node — but larger or smaller values can also be used.
              */
-            'segment-weights': PropertyValueEdge<number | number[] | string>;
+            "segment-weights": PropertyValueEdge<number | number[] | string>;
             /**
              * With value
              *  * "intersection" (default), the line from source to target
@@ -4260,7 +4568,7 @@ declare namespace cytoscape {
              * — but it should be used carefully because you can create
              * invalid points that intersection would have automatically corrected.
              */
-            'edge-distances': PropertyValueEdge<'intersection' | 'node-position'>;
+            "edge-distances": PropertyValueEdge<"intersection" | "node-position">;
         }
         /**
          * Taxi edges
@@ -4279,8 +4587,8 @@ declare namespace cytoscape {
              *  * `rightward`: Bundle outgoers righwards.
              *  * `leftward`: Bundle outgoers leftwards.
              */
-            'taxi-direction': PropertyValueEdge<
-                'auto' | 'vertical' | 'downward' | 'upward' | 'horizontal' | 'rightward' | 'leftward'
+            "taxi-direction": PropertyValueEdge<
+                "auto" | "vertical" | "downward" | "upward" | "horizontal" | "rightward" | "leftward"
             >;
             /**
              * The distance along the primary axis where the first turn is applied.
@@ -4291,14 +4599,14 @@ declare namespace cytoscape {
              *  * Note that bundling may not work with an explicit direction (upward, downward, leftward, or rightward)
              * in tandem with a turn distance specified in percent units.
              */
-            'taxi-turn': PropertyValueEdge<number | number[] | string>;
+            "taxi-turn": PropertyValueEdge<number | number[] | string>;
             /**
              * The minimum distance along the primary axis that is maintained between the nodes and the turns.
              *  * This value only takes on absolute values (e.g. `'5px'`).
              *  * This property makes the taxi edge be re-routed when the turns would be otherwise too close to
              * the source or target. As such, it also helps to avoid turns overlapping edge endpoint arrows.
              */
-            'taxi-turn-min-distance': PropertyValueEdge<number | string>;
+            "taxi-turn-min-distance": PropertyValueEdge<number | string>;
             /**
              * With value `intersection` (default), the `distances` (`taxi-turn` and `taxi-turn-min-distance`)
              * are considered from the outside of the source’s bounds to the outside of the target’s bounds.
@@ -4306,24 +4614,24 @@ declare namespace cytoscape {
              * The `node-position` option makes calculating edge points easier — but it should be used carefully because
              * you can create invalid points that `intersection` would have automatically corrected.
              */
-            'edge-distances': PropertyValueEdge<'intersection' | 'node-position'>;
+            "edge-distances": PropertyValueEdge<"intersection" | "node-position">;
         }
 
         type ArrowShape =
-            | 'tee'
-            | 'vee'
-            | 'triangle'
-            | 'triangle-tee'
-            | 'circle-triangle'
-            | 'triangle-cross'
-            | 'triangle-backcurve'
-            | 'square'
-            | 'circle'
-            | 'diamond'
-            | 'chevron'
-            | 'none';
-
-        type ArrowFill = 'filled' | 'hollow';
+            | "tee"
+            | "vee"
+            | "triangle"
+            | "triangle-tee"
+            | "circle-triangle"
+            | "triangle-cross"
+            | "triangle-backcurve"
+            | "square"
+            | "circle"
+            | "diamond"
+            | "chevron"
+            | "none";
+
+        type ArrowFill = "filled" | "hollow";
 
         /**
          * Edge arrow
@@ -4342,34 +4650,34 @@ declare namespace cytoscape {
          */
         interface EdgeArrow {
             /** The size of the arrow. */
-            'arrow-scale'?: PropertyValueEdge<number> | undefined;
+            "arrow-scale"?: PropertyValueEdge<number> | undefined;
 
             /** The colour of the edge’s source arrow. */
-            'source-arrow-color'?: PropertyValueEdge<Colour> | undefined;
+            "source-arrow-color"?: PropertyValueEdge<Colour> | undefined;
             /** The colour of the edge’s "mid-source" arrow. */
-            'mid-source-arrow-color'?: PropertyValueEdge<Colour> | undefined;
+            "mid-source-arrow-color"?: PropertyValueEdge<Colour> | undefined;
             /** The colour of the edge’s target arrow. */
-            'target-arrow-color'?: PropertyValueEdge<Colour> | undefined;
+            "target-arrow-color"?: PropertyValueEdge<Colour> | undefined;
             /** The colour of the edge’s "mid-target" arrow. */
-            'mid-target-arrow-color'?: PropertyValueEdge<Colour> | undefined;
+            "mid-target-arrow-color"?: PropertyValueEdge<Colour> | undefined;
 
             /** The shape of the edge’s source arrow. */
-            'source-arrow-shape'?: PropertyValueEdge<ArrowShape> | undefined;
+            "source-arrow-shape"?: PropertyValueEdge<ArrowShape> | undefined;
             /** The shape of the edge’s mid-source arrow. */
-            'mid-source-arrow-shape'?: PropertyValueEdge<ArrowShape> | undefined;
+            "mid-source-arrow-shape"?: PropertyValueEdge<ArrowShape> | undefined;
             /** The shape of the edge’s target arrow. */
-            'target-arrow-shape'?: PropertyValueEdge<ArrowShape> | undefined;
+            "target-arrow-shape"?: PropertyValueEdge<ArrowShape> | undefined;
             /** The shape of the edge’s mid-target arrow. */
-            'mid-target-arrow-shape'?: PropertyValueEdge<ArrowShape> | undefined;
+            "mid-target-arrow-shape"?: PropertyValueEdge<ArrowShape> | undefined;
 
             /** The fill state of the edge’s source arrow. */
-            'source-arrow-fill'?: PropertyValueEdge<ArrowFill> | undefined;
+            "source-arrow-fill"?: PropertyValueEdge<ArrowFill> | undefined;
             /** The fill state of the edge’s mid-source arrow. */
-            'mid-source-arrow-fill'?: PropertyValueEdge<ArrowFill> | undefined;
+            "mid-source-arrow-fill"?: PropertyValueEdge<ArrowFill> | undefined;
             /** The fill state of the edge’s target arrow. */
-            'target-arrow-fill'?: PropertyValueEdge<ArrowFill> | undefined;
+            "target-arrow-fill"?: PropertyValueEdge<ArrowFill> | undefined;
             /** The fill state of the edge’s mid-target arrow. */
-            'mid-target-arrow-fill'?: PropertyValueEdge<ArrowFill> | undefined;
+            "mid-target-arrow-fill"?: PropertyValueEdge<ArrowFill> | undefined;
         }
 
         /**
@@ -4377,23 +4685,23 @@ declare namespace cytoscape {
          */
         interface EdgeEndpoints<SingularType extends EdgeSingular> {
             /** Specifies the endpoint of the source side of the edge  */
-            'source-endpoint': PropertyValue<
+            "source-endpoint": PropertyValue<
                 SingularType,
-                | 'inside-to-node'
-                | 'outside-to-node'
-                | 'outside-to-node-or-label'
-                | 'outside-to-line'
-                | 'outside-to-line-or-label'
+                | "inside-to-node"
+                | "outside-to-node"
+                | "outside-to-node-or-label"
+                | "outside-to-line"
+                | "outside-to-line-or-label"
                 | string
             >;
             /** Specifies the endpoint of the target side of the edge  */
-            'target-endpoint': PropertyValue<
+            "target-endpoint": PropertyValue<
                 SingularType,
-                | 'inside-to-node'
-                | 'outside-to-node'
-                | 'outside-to-node-or-label'
-                | 'outside-to-line'
-                | 'outside-to-line-or-label'
+                | "inside-to-node"
+                | "outside-to-node"
+                | "outside-to-node-or-label"
+                | "outside-to-line"
+                | "outside-to-line-or-label"
                 | string
             >;
         }
@@ -4401,17 +4709,17 @@ declare namespace cytoscape {
         /**
          * http://js.cytoscape.org/#style/visibility
          */
-        interface Visibility<SingularType extends NodeSingular | EdgeSingular> {
+        interface Visibility<SingularType extends NodeSingular<CustomDataNode> | EdgeSingular, CustomDataNode> {
             /**
              * Whether to display the element; may be element for displayed or none for not displayed.
              * Note that a "display: none" bezier edge does not take up space in its bundle.
              */
-            display: PropertyValue<SingularType, 'none' | 'element'>;
+            display: PropertyValue<SingularType, "none" | "element">;
             /**
              * Whether the element is visible; may be visible or hidden.
              * Note that a "visibility : hidden" bezier edge still takes up space in its bundle.
              */
-            visibility: PropertyValue<SingularType, 'hidden' | 'visible'>;
+            visibility: PropertyValue<SingularType, "hidden" | "visible">;
             /**
              * The opacity of the element, ranging from 0 to 1.
              * Note that the opacity of a compound node parent affects the effective opacity of its children.
@@ -4422,29 +4730,29 @@ declare namespace cytoscape {
              * In general, an element with a higher "z-index" will be drawn on top of an element with a lower "z-index".
              * Note that edges are under nodes despite "z-index", except when necessary for compound nodes.
              */
-            'z-index': PropertyValue<SingularType, number>;
+            "z-index": PropertyValue<SingularType, number>;
             /**
              * May be bottom, orphan, auto (default), or top. The first drawn is bottom, the second is orphan,
              * which is the same depth as the root of the compound graph, followed by the default of auto
              * which draws in depth order from root to leaves of the compound graph. The last drawn is top.
              * It does not usually make sense to set this value for non-compound graphs.
              */
-            'z-compound-depth': PropertyValue<SingularType, 'auto' | 'top' | 'bottom' | 'orphan'>;
+            "z-compound-depth": PropertyValue<SingularType, "auto" | "top" | "bottom" | "orphan">;
             /**
              * May be auto (default) or manual. The auto setting draws edges under nodes,
              * whereas manual ignores this convention and draws solely based on the z-index value.
              */
-            'z-index-compare': PropertyValue<SingularType, 'auto' | 'manual'>;
+            "z-index-compare": PropertyValue<SingularType, "auto" | "manual">;
         }
 
         /** https://developer.mozilla.org/en-US/docs/Web/CSS/font-style */
-        type FontStyle = 'normal' | 'italic' | 'oblique';
+        type FontStyle = "normal" | "italic" | "oblique";
 
         /** https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight */
-        type FontWeight = number | 'normal' | 'bold' | 'lighter' | 'bolder';
+        type FontWeight = number | "normal" | "bold" | "lighter" | "bolder";
 
         /** http://js.cytoscape.org/#style/labels */
-        type TextTranformation = 'none' | 'uppercase' | 'lowercase';
+        type TextTranformation = "none" | "uppercase" | "lowercase";
 
         /**
          * Labels
@@ -4452,7 +4760,7 @@ declare namespace cytoscape {
          *
          * http://js.cytoscape.org/#style/labels
          */
-        interface Labels<SingularType extends NodeSingular | EdgeSingular> {
+        interface Labels<SingularType extends NodeSingular<CustomDataNode> | EdgeSingular, CustomDataNode> {
             /**
              * The text to display for an element’s label.
              */
@@ -4460,11 +4768,11 @@ declare namespace cytoscape {
             /**
              * The text to display for an edge’s source label.
              */
-            'source-label': PropertyValue<SingularType, string>;
+            "source-label": PropertyValue<SingularType, string>;
             /**
              * The text to display for an edge’s target label.
              */
-            'target-label': PropertyValue<SingularType, string>;
+            "target-label": PropertyValue<SingularType, string>;
             /**
              * Basic font styling:
              */
@@ -4475,29 +4783,29 @@ declare namespace cytoscape {
             /**
              * The opacity of the label text, including its outline.
              */
-            'text-opacity': PropertyValue<SingularType, number>;
+            "text-opacity": PropertyValue<SingularType, number>;
             /**
              * A comma-separated list of font names to use on the label text.
              */
-            'font-family': PropertyValue<SingularType, string>;
+            "font-family": PropertyValue<SingularType, string>;
             /**
              * The size of the label text.
              * https://developer.mozilla.org/en-US/docs/Web/CSS/font-family
              */
-            'font-size': PropertyValue<SingularType, number | string>;
+            "font-size": PropertyValue<SingularType, number | string>;
             /**
              * A CSS font style to be applied to the label text.
              * https://developer.mozilla.org/en-US/docs/Web/CSS/font-style
              */
-            'font-style': PropertyValue<SingularType, FontStyle>;
+            "font-style": PropertyValue<SingularType, FontStyle>;
             /**
              * A CSS font weight to be applied to the label text.
              */
-            'font-weight': PropertyValue<SingularType, FontWeight>;
+            "font-weight": PropertyValue<SingularType, FontWeight>;
             /**
              * A transformation to apply to the label text.
              */
-            'text-transform': PropertyValue<SingularType, TextTranformation>;
+            "text-transform": PropertyValue<SingularType, TextTranformation>;
 
             /**
              * Wrapping text:
@@ -4509,14 +4817,14 @@ declare namespace cytoscape {
              *  * "wrap" for manual and/ or autowrapping.
              *  * "ellipsis" to truncate the string and append
              */
-            'text-wrap': PropertyValue<SingularType, 'none' | 'wrap' | 'ellipsis'>;
+            "text-wrap": PropertyValue<SingularType, "none" | "wrap" | "ellipsis">;
             /**
              * The maximum width for wrapped text,
              * applied when "text-wrap" is set to wrap.
              * For only manual newlines (i.e.\n), set a very large
              * value like 1000px such that only your newline characters would apply.
              */
-            'text-max-width': PropertyValue<SingularType, string>;
+            "text-max-width": PropertyValue<SingularType, string>;
             /**
              * The characters that may be used for possible wrapping locations when
              * a line overflows `text-max-width`; may be `whitespace` (default) or `anywhere`.
@@ -4524,14 +4832,14 @@ declare namespace cytoscape {
              * and no whitespace exists. Using anywhere with text in the Latin alphabet,
              * for example, will split words at arbitrary locations.
              */
-            'text-overflow-wrap': PropertyValue<SingularType, 'whitespace' | 'anywhere'>;
+            "text-overflow-wrap": PropertyValue<SingularType, "whitespace" | "anywhere">;
             /**
              * The justification of multiline (wrapped) labels; may be
              * `left`, `center`, `right`, or `auto` (default). The auto value makes it so that a
              * node’s label is justified along the node — e.g. a label on the right side
              * of a node is left justified.
              */
-            'text-justification': PropertyValue<SingularType, 'auto' | 'left' | 'center' | 'right'>;
+            "text-justification": PropertyValue<SingularType, "auto" | "left" | "center" | "right">;
             /**
              * The line height of multiline text, as a relative, unitless value. It specifies the
              * vertical spacing between each line. With value `1` (default), the lines are stacked
@@ -4539,7 +4847,7 @@ declare namespace cytoscape {
              * With value `2`, for example, there is whitespace between each line equal to the visible
              * height of a line of text.
              */
-            'line-height': PropertyValue<SingularType, number>;
+            "line-height": PropertyValue<SingularType, number>;
 
             /**
              * Node label alignment:
@@ -4548,11 +4856,11 @@ declare namespace cytoscape {
             /**
              * The vertical alignment of a node’s label.
              */
-            'text-halign': PropertyValue<SingularType, 'left' | 'center' | 'right'>;
+            "text-halign": PropertyValue<SingularType, "left" | "center" | "right">;
             /**
              * The vertical alignment of a node’s label.
              */
-            'text-valign': PropertyValue<SingularType, 'top' | 'center' | 'bottom'>;
+            "text-valign": PropertyValue<SingularType, "top" | "center" | "bottom">;
 
             /**
              * Edge label alignment:
@@ -4561,11 +4869,11 @@ declare namespace cytoscape {
             /**
              * For the source label of an edge, how far from the source node the label should be placed.
              */
-            'source-text-offset': PropertyValue<SingularType, number>;
+            "source-text-offset": PropertyValue<SingularType, number>;
             /**
              * For the target label of an edge, how far from the target node the label should be placed.
              */
-            'target-text-offset': PropertyValue<SingularType, number>;
+            "target-text-offset": PropertyValue<SingularType, number>;
             /**
              * Margins:
              */
@@ -4573,27 +4881,27 @@ declare namespace cytoscape {
             /**
              * A margin that shifts the label along the x- axis.
              */
-            'text-margin-x': PropertyValue<SingularType, number>;
+            "text-margin-x": PropertyValue<SingularType, number>;
             /**
              * A margin that shifts the label along the y- axis.
              */
-            'text-margin-y': PropertyValue<SingularType, number>;
+            "text-margin-y": PropertyValue<SingularType, number>;
             /**
              * (For the source label of an edge.)
              */
-            'source-text-margin-x': PropertyValue<SingularType, number>;
+            "source-text-margin-x": PropertyValue<SingularType, number>;
             /**
              * (For the source label of an edge.)
              */
-            'source-text-margin-y': PropertyValue<SingularType, number>;
+            "source-text-margin-y": PropertyValue<SingularType, number>;
             /**
              * (For the target label of an edge.)
              */
-            'target-text-margin-x': PropertyValue<SingularType, number>;
+            "target-text-margin-x": PropertyValue<SingularType, number>;
             /**
              * (For the target label of an edge.)
              */
-            'target-text-margin-y': PropertyValue<SingularType, number>;
+            "target-text-margin-y": PropertyValue<SingularType, number>;
             /**
              * Rotating text:
              */
@@ -4606,16 +4914,16 @@ declare namespace cytoscape {
              *  * The special value `none` can be used to denote 0deg.
              *  * Rotations works best with left-to-right text.
              */
-            'text-rotation': PropertyValue<SingularType, number | 'autorotate' | 'none'>;
+            "text-rotation": PropertyValue<SingularType, number | "autorotate" | "none">;
 
             /**
              * (For the source label of an edge.)
              */
-            'source-text-rotation': PropertyValue<SingularType, number | 'autorotate' | 'none'>;
+            "source-text-rotation": PropertyValue<SingularType, number | "autorotate" | "none">;
             /**
              * (For the target label of an edge.)
              */
-            'target-text-rotation': PropertyValue<SingularType, number | 'autorotate' | 'none'>;
+            "target-text-rotation": PropertyValue<SingularType, number | "autorotate" | "none">;
 
             /**
              * Outline:
@@ -4624,15 +4932,15 @@ declare namespace cytoscape {
             /**
              * The colour of the outline around the element’s label text.
              */
-            'text-outline-color': PropertyValue<SingularType, Colour>;
+            "text-outline-color": PropertyValue<SingularType, Colour>;
             /**
              * The opacity of the outline on label text.
              */
-            'text-outline-opacity': PropertyValue<SingularType, number>;
+            "text-outline-opacity": PropertyValue<SingularType, number>;
             /**
              * The size of the outline on label text.
              */
-            'text-outline-width': PropertyValue<SingularType, number | string>;
+            "text-outline-width": PropertyValue<SingularType, number | string>;
 
             /**
              * Background:
@@ -4641,19 +4949,19 @@ declare namespace cytoscape {
             /**
              * The padding provides visual spacing between the text and the edge of the background.
              */
-            'text-background-padding': PropertyValue<SingularType, string>;
+            "text-background-padding": PropertyValue<SingularType, string>;
             /**
              * A colour to apply on the text background.
              */
-            'text-background-color': PropertyValue<SingularType, Colour>;
+            "text-background-color": PropertyValue<SingularType, Colour>;
             /**
              * The opacity of the label background; the background is disabled for 0 (default value).
              */
-            'text-background-opacity': PropertyValue<SingularType, number>;
+            "text-background-opacity": PropertyValue<SingularType, number>;
             /**
              * The shape to use for the label background.
              */
-            'text-background-shape': PropertyValue<SingularType, 'rectangle' | 'roundrectangle'>;
+            "text-background-shape": PropertyValue<SingularType, "rectangle" | "roundrectangle">;
 
             /**
              * Border:
@@ -4662,19 +4970,19 @@ declare namespace cytoscape {
             /**
              * The width of the border around the label; the border is disabled for 0 (default value).
              */
-            'text-border-opacity': PropertyValue<SingularType, number>;
+            "text-border-opacity": PropertyValue<SingularType, number>;
             /**
              * The width of the border around the label.
              */
-            'text-border-width': PropertyValue<SingularType, number>;
+            "text-border-width": PropertyValue<SingularType, number>;
             /**
              * The style of the border around the label.
              */
-            'text-border-style': PropertyValue<SingularType, LineStyle>;
+            "text-border-style": PropertyValue<SingularType, LineStyle>;
             /**
              * The colour of the border around the label.
              */
-            'text-border-color': PropertyValue<SingularType, Colour>;
+            "text-border-color": PropertyValue<SingularType, Colour>;
 
             /**
              * Interactivity:
@@ -4688,28 +4996,28 @@ declare namespace cytoscape {
              * This effect is more pronounced at larger screen pixel ratios.However,
              * it is guaranteed that the label will be shown at sizes equal to or greater than the value specified.
              */
-            'min-zoomed-font-size': PropertyValue<SingularType, number>;
+            "min-zoomed-font-size": PropertyValue<SingularType, number>;
             /**
              * Whether events should occur on an element if the label receives an event; may be `yes` or `no`.
              * You may want a style applied to the text on active so you know the text is activatable.
              */
-            'text-events': PropertyValue<SingularType, 'yes' | 'no'>;
+            "text-events": PropertyValue<SingularType, "yes" | "no">;
         }
 
         /**
          * http://js.cytoscape.org/#style/events
          */
-        interface Events<SingularType extends NodeSingular | EdgeSingular> {
+        interface Events<SingularType extends NodeSingular<CustomDataNode> | EdgeSingular, CustomDataNode=any> {
             /**
              * Whether events should occur on an element (e.g.tap, mouseover, etc.).
              *  * For "no", the element receives no events and events simply pass through to the core/viewport.
              */
-            events: PropertyValue<SingularType, 'yes' | 'no'>;
+            events: PropertyValue<SingularType, "yes" | "no">;
             /**
              *  Whether events should occur on an element if the label receives an event.
              * You may want a style applied to the text on active so you know the text is activatable.
              */
-            'text-events': PropertyValue<SingularType, 'yes' | 'no'>;
+            "text-events": PropertyValue<SingularType, "yes" | "no">;
         }
 
         /**
@@ -4721,49 +5029,49 @@ declare namespace cytoscape {
             /**
              * The colour of the overlay.
              */
-            'overlay-color': PropertyValueEdge<Colour>;
+            "overlay-color": PropertyValueEdge<Colour>;
             /**
              * The area outside of the element within which the overlay is shown.
              */
-            'overlay-padding': PropertyValueEdge<number | string>;
+            "overlay-padding": PropertyValueEdge<number | string>;
             /**
              * The opacity of the overlay.
              */
-            'overlay-opacity': PropertyValueEdge<number>;
+            "overlay-opacity": PropertyValueEdge<number>;
         }
 
         /**
          * Transition animation
          */
         type TransitionTimingFunction =
-            | 'linear'
-            | 'spring'
-            | 'cubic-bezier'
-            | 'ease'
-            | 'ease-in'
-            | 'ease-out'
-            | 'ease-in-out'
-            | 'ease-in-sine'
-            | 'ease-out-sine'
-            | 'ease-in-out-sine'
-            | 'ease-in-quad'
-            | 'ease-out-quad'
-            | 'ease-in-out-quad'
-            | 'ease-in-cubic'
-            | 'ease-out-cubic'
-            | 'ease-in-out-cubic'
-            | 'ease-in-quart'
-            | 'ease-out-quart'
-            | 'ease-in-out-quart'
-            | 'ease-in-quint'
-            | 'ease-out-quint'
-            | 'ease-in-out-quint'
-            | 'ease-in-expo'
-            | 'ease-out-expo'
-            | 'ease-in-out-expo'
-            | 'ease-in-circ'
-            | 'ease-out-circ'
-            | 'ease-in-out-circ';
+            | "linear"
+            | "spring"
+            | "cubic-bezier"
+            | "ease"
+            | "ease-in"
+            | "ease-out"
+            | "ease-in-out"
+            | "ease-in-sine"
+            | "ease-out-sine"
+            | "ease-in-out-sine"
+            | "ease-in-quad"
+            | "ease-out-quad"
+            | "ease-in-out-quad"
+            | "ease-in-cubic"
+            | "ease-out-cubic"
+            | "ease-in-out-cubic"
+            | "ease-in-quart"
+            | "ease-out-quart"
+            | "ease-in-out-quart"
+            | "ease-in-quint"
+            | "ease-out-quint"
+            | "ease-in-out-quint"
+            | "ease-in-expo"
+            | "ease-out-expo"
+            | "ease-in-out-expo"
+            | "ease-in-circ"
+            | "ease-out-circ"
+            | "ease-in-out-circ";
 
         /**
          * http://js.cytoscape.org/#style/transition-animation
@@ -4772,19 +5080,19 @@ declare namespace cytoscape {
             /**
              * A comma separated list of style properties to animate in this state.
              */
-            'transition-property': string;
+            "transition-property": string;
             /**
              * The length of the transition in seconds(e.g. 0.5s).
              */
-            'transition-duration': number;
+            "transition-duration": number;
             /**
              * The length of the delay in seconds before the transition occurs (e.g. 250ms).
              */
-            'transition-delay': number;
+            "transition-delay": number;
             /**
              * An easing function that controls the animation progress curve (a visualisation of easings serves as a reference).
              */
-            'transition-timing-function': TransitionTimingFunction;
+            "transition-timing-function": TransitionTimingFunction;
         }
 
         /**
@@ -4801,45 +5109,45 @@ declare namespace cytoscape {
             /**
              * The colour of the indicator shown when the background is grabbed by the user.
              */
-            'active-bg-color': PropertyValueCore<Colour>;
+            "active-bg-color": PropertyValueCore<Colour>;
             /**
              * The opacity of the active background indicator.
              */
-            'active-bg-opacity': PropertyValueCore<number>;
+            "active-bg-opacity": PropertyValueCore<number>;
             /**
              * The size of the active background indicator.
              */
-            'active-bg-size': PropertyValueCore<number>;
+            "active-bg-size": PropertyValueCore<number>;
             /**
              * Selection box:
              */
             /**
              * The background colour of the selection box used for drag selection.
              */
-            'selection-box-color': PropertyValueCore<Colour>;
+            "selection-box-color": PropertyValueCore<Colour>;
             /**
              * The colour of the border on the selection box.
              */
-            'selection-box-border-color': PropertyValueCore<Colour>;
+            "selection-box-border-color": PropertyValueCore<Colour>;
             /**
              * The size of the border on the selection box.
              */
-            'selection-box-border-width': PropertyValueCore<number>;
+            "selection-box-border-width": PropertyValueCore<number>;
             /**
              * The opacity of the selection box.
              */
-            'selection-box-opacity': PropertyValueCore<number>;
+            "selection-box-opacity": PropertyValueCore<number>;
             /**
              * Texture during viewport gestures:
              */
             /**
              * The colour of the area outside the viewport texture when initOptions.textureOnViewport === true.
              */
-            'outside-texture-bg-color': PropertyValueCore<Colour>;
+            "outside-texture-bg-color": PropertyValueCore<Colour>;
             /**
              * The opacity of the area outside the viewport texture.
              */
-            'outside-texture-bg-opacity': PropertyValueCore<number>;
+            "outside-texture-bg-opacity": PropertyValueCore<number>;
         }
     }
 
@@ -4852,8 +5160,8 @@ declare namespace cytoscape {
      */
     interface EventObject extends InputEventObject, LayoutEventObject {}
 
-    interface EventObjectNode extends EventObject {
-        target: NodeSingular;
+    interface EventObjectNode<CustomDataNode> extends EventObject {
+        target: NodeSingular<CustomDataNode>;
     }
 
     interface EventObjectEdge extends EventObject {
@@ -4872,8 +5180,8 @@ declare namespace cytoscape {
         cy: Core;
         /** indicates the element or core that first caused the event */
         target: any;
-        /** the event type string (e.g. "tap") */
-        type: UserInputDeviceEventName | UserInputDeviceEventNameExt;
+        /** the event type string (e.g. "tap", "select") */
+        type: UserInputDeviceEventName | UserInputDeviceEventNameExt | CollectionEventName | GraphEventName;
         /** the event namespace string (e.g. "foo" for "foo.tap") */
         namespace: string;
         /** Unix epoch time of event in milliseconds */
@@ -4909,23 +5217,23 @@ declare namespace cytoscape {
      */
     type UserInputDeviceEventName =
         // when the mouse button is pressed
-        | 'mousedown'
+        | "mousedown"
         // when the mouse button is released
-        | 'mouseup'
+        | "mouseup"
         // after mousedown then mouseup
-        | 'click'
+        | "click"
         // when the cursor is put on top of the target
-        | 'mouseover'
+        | "mouseover"
         // when the cursor is moved off of the target
-        | 'mouseout'
+        | "mouseout"
         // when the cursor is moved somewhere on top of the target
-        | 'mousemove'
+        | "mousemove"
         // when one or more fingers starts to touch the screen
-        | 'touchstart'
+        | "touchstart"
         // when one or more fingers are moved on the screen
-        | 'touchmove'
+        | "touchmove"
         // when one or more fingers are removed from the screen
-        | 'touchend';
+        | "touchend";
 
     /**
      * There are also some higher level events that you can use
@@ -4935,43 +5243,43 @@ declare namespace cytoscape {
      */
     type UserInputDeviceEventNameExt =
         // normalised tap start event (either mousedown or touchstart)
-        | 'tapstart'
-        | 'vmousedown'
+        | "tapstart"
+        | "vmousedown"
         // normalised move event (either touchmove or mousemove)
-        | 'tapdrag'
-        | 'vmousemove'
+        | "tapdrag"
+        | "vmousemove"
         // normalised over element event (either touchmove or mousemove/mouseover)
-        | 'tapdragover'
+        | "tapdragover"
         // normalised off of element event (either touchmove or mousemove/mouseout)
-        | 'tapdragout'
+        | "tapdragout"
         // normalised tap end event (either mouseup or touchend)
-        | 'tapend'
-        | 'vmouseup'
+        | "tapend"
+        | "vmouseup"
         // normalised tap event (either click, or touchstart followed by touchend without touchmove)
-        | 'tap'
-        | 'vclick'
+        | "tap"
+        | "vclick"
         // normalised tap hold event
-        | 'taphold'
+        | "taphold"
         // normalised right-click mousedown or two-finger tapstart
-        | 'cxttapstart'
+        | "cxttapstart"
         // normalised right-click mouseup or two-finger tapend
-        | 'cxttapend'
+        | "cxttapend"
         // normalised right-click or two-finger tap
-        | 'cxttap'
+        | "cxttap"
         // normalised mousemove or two-finger drag after cxttapstart but before cxttapend
-        | 'cxtdrag'
+        | "cxtdrag"
         // when going over a node via cxtdrag
-        | 'cxtdragover'
+        | "cxtdragover"
         // when going off a node via cxtdrag
-        | 'cxtdragout'
+        | "cxtdragout"
         // when starting box selection
-        | 'boxstart'
+        | "boxstart"
         // when ending box selection
-        | 'boxend'
+        | "boxend"
         // triggered on elements when selected by box selection
-        | 'boxselect'
+        | "boxselect"
         // triggered on elements when inside the box on boxend
-        | 'box';
+        | "box";
 
     /**
      * These events are custom to Cytoscape.js. You can bind to these events for collections.
@@ -4979,51 +5287,51 @@ declare namespace cytoscape {
      */
     type CollectionEventName =
         // when an element is added to the graph
-        | 'add'
+        | "add"
         // when an element is removed from the graph
-        | 'remove'
+        | "remove"
         // when an element is moved w.r.t. topology. Nodes: when the compound parent is changed. Edges: when the source or target is changed
-        | 'move'
+        | "move"
         // when an element is selected
-        | 'select'
+        | "select"
         // when an element is unselected
-        | 'unselect'
+        | "unselect"
         // when an element is selected by a tap gesture
-        | 'tapselect'
+        | "tapselect"
         // when an element is unselected by a tap elsewhere
-        | 'tapunselect'
+        | "tapunselect"
         // triggered on elements when selected by box selection
-        | 'boxselect'
+        | "boxselect"
         // triggered on elements when inside the box on boxend
-        | 'box'
+        | "box"
         // when an element is locked
-        | 'lock'
+        | "lock"
         // when an element is unlocked
-        | 'unlock'
+        | "unlock"
         // when an element is grabbed directly (including only the one node directly under the cursor or the user’s finger)
-        | 'grabon'
+        | "grabon"
         // when an element is grabbed (including all elements that would be dragged)
-        | 'grab'
+        | "grab"
         // when an element is grabbed and then moved
-        | 'drag'
+        | "drag"
         // when an element is freed (i.e. let go from being grabbed)
-        | 'free'
+        | "free"
         // when an element is freed directly (including only the one node directly under the cursor or the user’s finger)
-        | 'freeon'
+        | "freeon"
         // when an element is freed after being dragged (i.e. grab then drag then free)
-        | 'dragfree'
+        | "dragfree"
         // when an element is freed after being dragged directly (i.e. grabon, drag, freeon)
-        | 'dragfreeon'
+        | "dragfreeon"
         // when an element changes position
-        | 'position'
+        | "position"
         // when an element’s data is changed
-        | 'data'
+        | "data"
         // when an element’s scratchpad data is changed
-        | 'scratch'
+        | "scratch"
         // when an element’s style is changed
-        | 'style'
+        | "style"
         // when a node’s background image is loaded
-        | 'background';
+        | "background";
 
     /**
      * These events are custom to Cytoscape.js, and they occur on the core.
@@ -5031,32 +5339,32 @@ declare namespace cytoscape {
      */
     type GraphEventName =
         // when a layout starts running
-        | 'layoutstart'
+        | "layoutstart"
         // when a layout has set initial positions for all the nodes (but perhaps not final positions)
-        | 'layoutready'
+        | "layoutready"
         // when a layout has finished running completely or otherwise stopped running
-        | 'layoutstop'
+        | "layoutstop"
         // when a new Core of Cytoscape.js is ready to be interacted with
-        | 'ready'
+        | "ready"
         // when the Core of Cytoscape.js was explicitly destroyed by calling .destroy().
-        | 'destroy'
+        | "destroy"
         // when the viewport is (re)rendered
-        | 'render'
+        | "render"
         // when the viewport is panned
-        | 'pan'
+        | "pan"
         // when the viewport is panned via dragging
-        | 'dragpan'
+        | "dragpan"
         // when the viewport is zoomed
-        | 'zoom'
+        | "zoom"
         // when the viewport is zoomed via pinch gesture. This event is only supported for browsers which support the gesturechange event or touch events.
         // Other browsers will fire the scrollzoom event.
-        | 'pinchzoom'
+        | "pinchzoom"
         // when the viewport is zoomed via the scroll wheel
-        | 'scrollzoom'
+        | "scrollzoom"
         // when the viewport is changed (i.e. from a pan, a zoom, or from both when zooming about a point – e.g. pinch-to-zoom)
-        | 'viewport'
+        | "viewport"
         // when the viewport is resized (usually by calling cy.resize(), a window resize, or toggling a class on the Cytoscape.js div)
-        | 'resize';
+        | "resize";
 
     /**
      * Layouts
@@ -5085,20 +5393,20 @@ declare namespace cytoscape {
 
     interface Layouts extends LayoutManipulation, LayoutEvents {}
 
-    type LayoutOptions =
+    type LayoutOptions<CustomDataNode> =
         | NullLayoutOptions
-        | RandomLayoutOptions
-        | PresetLayoutOptions
-        | GridLayoutOptions
-        | CircleLayoutOptions
-        | ConcentricLayoutOptions
-        | BreadthFirstLayoutOptions
-        | CoseLayoutOptions
-        | BaseLayoutOptions;
+        | RandomLayoutOptions<CustomDataNode>
+        | PresetLayoutOptions<CustomDataNode>
+        | GridLayoutOptions<CustomDataNode>
+        | CircleLayoutOptions<CustomDataNode>
+        | ConcentricLayoutOptions<CustomDataNode>
+        | BreadthFirstLayoutOptions<CustomDataNode>
+        | CoseLayoutOptions<CustomDataNode>
+        | BaseLayoutOptions<CustomDataNode>;
 
     type LayoutHandler = (e: LayoutEventObject) => void;
 
-    interface BaseLayoutOptions {
+    interface BaseLayoutOptions<CustomDataNode> {
         name: string;
         // on layoutready event
         ready?: LayoutHandler | undefined;
@@ -5110,13 +5418,13 @@ declare namespace cytoscape {
          * @param node The node.
          * @param position The node position.
          */
-        transform?(node: NodeSingular, position: Position): Position;
+        transform?(node: NodeSingular<CustomDataNode>, position: Position): Position;
     }
     /**
      * http://js.cytoscape.org/#layouts/null
      */
     interface NullLayoutOptions {
-        name: 'null';
+        name: "null";
     }
     interface BoundingBox12 {
         x1: number;
@@ -5130,7 +5438,7 @@ declare namespace cytoscape {
         w: number;
         h: number;
     }
-    interface AnimatedLayoutOptions {
+    interface AnimatedLayoutOptions<CustomDataNode=any> {
         // whether to transition the node positions
         animate?: boolean | undefined;
         // duration of animation in ms if enabled
@@ -5142,13 +5450,13 @@ declare namespace cytoscape {
          * All nodes animated by default on animate enabled.
          * Non-animated nodes are positioned immediately when the layout starts
          */
-        animateFilter?(node: NodeSingular, index: number): boolean;
+        animateFilter?(node: NodeSingular<CustomDataNode>, index: number): boolean;
     }
     /**
      * http://js.cytoscape.org/#layouts/random
      */
-    interface RandomLayoutOptions extends BaseLayoutOptions, AnimatedLayoutOptions {
-        name: 'random';
+    interface RandomLayoutOptions<CustomDataNode=any> extends BaseLayoutOptions<CustomDataNode>, AnimatedLayoutOptions {
+        name: "random";
         // whether to fit to viewport
         fit?: boolean;
         // fit padding
@@ -5164,8 +5472,8 @@ declare namespace cytoscape {
         [nodeid: string]: Position;
     }
     type NodePositionFunction = (nodeid: string) => Position;
-    interface PresetLayoutOptions extends BaseLayoutOptions, AnimatedLayoutOptions {
-        name: 'preset';
+    interface PresetLayoutOptions<CustomDataNode=any> extends BaseLayoutOptions<CustomDataNode>, AnimatedLayoutOptions {
+        name: "preset";
         // map of (node id) => (position obj); or function(node){ return somPos; }
         positions?: NodePositionMap | NodePositionFunction | undefined;
         // the zoom level to set (prob want fit = false if set)
@@ -5178,14 +5486,12 @@ declare namespace cytoscape {
         padding?: number | undefined;
     }
 
-    interface SortableNode {
-        data: { weight: number };
-    }
-
-    // function(a, b){ return a.data('weight') - b.data('weight') }
-    type SortingFunction = (a: SortableNode, b: SortableNode) => number;
+    // A function that determines the order of the nodes. The return value has the same
+    // semantics as for compare function passed to Array.sort.
+    type SortingFunction<CustomDataNode> = (a: NodeSingular<CustomDataNode>, b: NodeSingular<CustomDataNode>) => number;
 
-    interface ShapedLayoutOptions extends BaseLayoutOptions, AnimatedLayoutOptions {
+    interface ShapedLayoutOptions<CustomDataNode> extends BaseLayoutOptions<CustomDataNode>
+    , AnimatedLayoutOptions {
         // whether to fit to viewport
         fit?: boolean;
         // padding used on fit
@@ -5202,13 +5508,13 @@ declare namespace cytoscape {
         spacingFactor?: number | undefined;
 
         // a sorting function to order the nodes
-        sort?: SortingFunction | undefined;
+        sort?: SortingFunction<CustomDataNode> | undefined;
     }
     /**
      * http://js.cytoscape.org/#layouts/grid
      */
-    interface GridLayoutOptions extends ShapedLayoutOptions {
-        name: 'grid';
+    interface GridLayoutOptions<CustomDataNode> extends ShapedLayoutOptions<CustomDataNode> {
+        name: "grid";
 
         // extra spacing around nodes when avoidOverlap: true
         avoidOverlapPadding?: number | undefined;
@@ -5220,14 +5526,14 @@ declare namespace cytoscape {
         // force num of columns in the grid
         cols?: number | undefined;
         // returns { row, col } for element
-        position?(node: NodeSingular): { row: number; col: number };
+        position?(node: NodeSingular<CustomDataNode>): { row: number; col: number };
     }
 
     /**
      * http://js.cytoscape.org/#layouts/circle
      */
-    interface CircleLayoutOptions extends ShapedLayoutOptions {
-        name: 'circle';
+    interface CircleLayoutOptions<CustomDataNode> extends ShapedLayoutOptions<CustomDataNode> {
+        name: "circle";
 
         // the radius of the circle
         radius?: number | undefined;
@@ -5242,8 +5548,8 @@ declare namespace cytoscape {
     /**
      * http://js.cytoscape.org/#layouts/concentric
      */
-    interface ConcentricLayoutOptions extends ShapedLayoutOptions {
-        name: 'concentric';
+    interface ConcentricLayoutOptions<CustomDataNode> extends ShapedLayoutOptions<CustomDataNode> {
+        name: "concentric";
 
         // where nodes start in radians, e.g. 3 / 2 * Math.PI,
         startAngle?: number;
@@ -5262,16 +5568,16 @@ declare namespace cytoscape {
         // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
         spacingFactor?: number;
         // returns numeric value for each node, placing higher nodes in levels towards the centre
-        concentric?(node: { degree(): number }): number;
+        concentric?(node: NodeSingular<CustomDataNode>): number;
         // the variation of concentric values in each level
-        levelWidth?(node: { maxDegree(): number }): number;
+        levelWidth?(node: NodeCollection<CustomDataNode>): number;
     }
 
     /**
      * http://js.cytoscape.org/#layouts/breadthfirst
      */
-    interface BreadthFirstLayoutOptions extends ShapedLayoutOptions {
-        name: 'breadthfirst';
+    interface BreadthFirstLayoutOptions<CustomDataNode> extends ShapedLayoutOptions<CustomDataNode> {
+        name: "breadthfirst";
 
         // whether the tree is directed downwards (or edges can point in any direction if false)
         directed?: boolean;
@@ -5286,14 +5592,14 @@ declare namespace cytoscape {
         // whether to create an even grid into which the DAG is placed (circle:false only)
         grid?: boolean;
         // a sorting function to order nodes at equal depth. e.g. function(a, b){ return a.data('weight') - b.data('weight') }
-        depthSort?: (a: NodeSingular, b: NodeSingular) => number;
+        depthSort?: (a: NodeSingular<CustomDataNode>, b: NodeSingular<CustomDataNode>) => number;
     }
 
     /**
      * http://js.cytoscape.org/#layouts/cose
      */
-    interface CoseLayoutOptions extends ShapedLayoutOptions {
-        name: 'cose';
+    interface CoseLayoutOptions<CustomDataNode> extends ShapedLayoutOptions<CustomDataNode> {
+        name: "cose";
 
         // Number of iterations between consecutive screen positions update
         // (0 -> only updated on the end)
@@ -5510,7 +5816,7 @@ declare namespace cytoscape {
          * completing the animation or frame for the next frame of the animation.
          * http://js.cytoscape.org/#ani.promise
          */
-        promise(animationEvent?: 'completed' | 'complete' | 'frame'): Promise<EventObject>;
+        promise(animationEvent?: "completed" | "complete" | "frame"): Promise<EventObject>;
     }
 
     /**
